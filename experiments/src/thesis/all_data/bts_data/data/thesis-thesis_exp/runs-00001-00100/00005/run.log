INFO     planner time limit: 900s
INFO     planner memory limit: 3584 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 899s
INFO     translator memory limit: 3584 MB
INFO     translator command line string: /usr/local/downward-projects/downward/experiments/.venv/bin/python3 /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-beb2e19b3d35a0ced2c328754445ca6967892fa8_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 21 rules.
Computing model... [0.030s CPU, 0.022s wall-clock]
2550 relevant atoms
1708 auxiliary atoms
4258 final queue length
7456 total queue pushes
Completing instantiation... [0.040s CPU, 0.041s wall-clock]
Instantiating: [0.070s CPU, 0.067s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
29 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.010s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.065s wall-clock]
2324 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
56 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.029s wall-clock]
Reordering and filtering variables...
57 of 57 variables necessary.
29 of 57 mutex groups necessary.
1568 of 1568 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.014s wall-clock]
Translator variables: 57
Translator derived variables: 0
Translator facts: 870
Translator goal facts: 23
Translator mutex groups: 29
Translator total mutex groups size: 841
Translator operators: 1568
Translator axioms: 0
Translator task size: 13467
Translator peak memory: 40676 KB
Writing output... [0.010s CPU, 0.010s wall-clock]
Done! [0.210s CPU, 0.205s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 899s
INFO     search memory limit: 3584 MB
INFO     search command line string: /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-beb2e19b3d35a0ced2c328754445ca6967892fa8_e5e41175/builds/release/bin/downward --evaluator 'h=ff()' --search 'eager(alt([lwm_based_type(h), single(h)]))' --internal-plan-file sas_plan < output.sas
[t=0s, 11252 KB] reading input...
[t=0.00684305s, 12844 KB] done reading input!
[t=0.0108005s, 13592 KB] Simplifying 6216 unary operators... done! [4704 unary operators]
[t=0.015417s, 13856 KB] time to simplify: 0.00461652s
[t=0.0157536s, 13856 KB] Initializing additive heuristic...
[t=0.0159494s, 13856 KB] Initializing FF heuristic...
[t=0.015976s, 13856 KB] Building successor generator...done!
[t=0.0165365s, 13856 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0165881s, 13856 KB] time for successor generation creation: 0s
[t=0.0166131s, 13856 KB] Variables: 57
[t=0.0166491s, 13856 KB] FactPairs: 870
[t=0.0166717s, 13856 KB] Bytes per state: 24
[t=0.0166947s, 13856 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0167528s, 13856 KB] New best heuristic value for ff(): 48
[t=0.0168565s, 13856 KB] g=0, 1 evaluated, 0 expanded
[t=0.0168817s, 13856 KB] Initial heuristic value for ff(): 48
[t=0.0169115s, 13856 KB] pruning method: none
[t=0.0169352s, 13856 KB] Start Timestep: 1685737238776 millisecond(s).
[t=0.0225384s, 13856 KB] New best heuristic value for ff(): 47
[t=0.023543s, 13856 KB] g=4, 124 evaluated, 24 expanded
[t=0.0235734s, 13856 KB] New best heuristic value for ff(): 45
[t=0.0263214s, 13856 KB] g=6, 176 evaluated, 33 expanded
[t=0.0304832s, 13856 KB] New best heuristic value for ff(): 43
[t=0.0308092s, 13856 KB] g=8, 261 evaluated, 46 expanded
[t=0.0424386s, 13856 KB] New best heuristic value for ff(): 42
[t=0.0428318s, 13856 KB] g=12, 492 evaluated, 84 expanded
[t=0.066389s, 13856 KB] New best heuristic value for ff(): 41
[t=0.0700166s, 13856 KB] g=16, 1020 evaluated, 179 expanded
[t=0.0703403s, 13856 KB] New best heuristic value for ff(): 40
[t=0.071167s, 13856 KB] g=18, 1039 evaluated, 183 expanded
[t=0.0743053s, 13856 KB] New best heuristic value for ff(): 38
[t=0.0743649s, 13856 KB] g=20, 1100 evaluated, 193 expanded
[t=0.298239s, 14512 KB] New best heuristic value for ff(): 37
[t=0.300683s, 14512 KB] g=28, 5504 evaluated, 1036 expanded
[t=0.510079s, 15376 KB] New best heuristic value for ff(): 36
[t=0.512823s, 15376 KB] g=34, 9577 evaluated, 1800 expanded
[t=0.534012s, 15376 KB] New best heuristic value for ff(): 35
[t=0.537008s, 15376 KB] g=38, 10040 evaluated, 1879 expanded
[t=0.733915s, 15808 KB] New best heuristic value for ff(): 34
[t=0.735638s, 15808 KB] g=44, 13910 evaluated, 2586 expanded
[t=19.2733s, 77564 KB] New best heuristic value for ff(): 33
[t=19.2772s, 77564 KB] g=56, 371792 evaluated, 86354 expanded
[t=19.2972s, 77564 KB] New best heuristic value for ff(): 32
[t=19.3002s, 77564 KB] g=60, 372241 evaluated, 86430 expanded
[t=19.3012s, 77564 KB] New best heuristic value for ff(): 31
[t=19.3015s, 77564 KB] g=62, 372266 evaluated, 86434 expanded
[t=19.3016s, 77564 KB] New best heuristic value for ff(): 29
[t=19.3038s, 77564 KB] g=64, 372309 evaluated, 86440 expanded
[t=19.3051s, 77564 KB] New best heuristic value for ff(): 28
[t=19.3056s, 77564 KB] g=66, 372342 evaluated, 86445 expanded
[t=19.3171s, 77564 KB] New best heuristic value for ff(): 27
[t=19.3177s, 77564 KB] g=70, 372581 evaluated, 86487 expanded
[t=22.8986s, 87780 KB] New best heuristic value for ff(): 25
[t=22.9016s, 87780 KB] g=82, 441767 evaluated, 100450 expanded
[t=22.9026s, 87780 KB] New best heuristic value for ff(): 23
[t=22.9027s, 87780 KB] g=84, 441786 evaluated, 100454 expanded
[t=30.7117s, 108868 KB] New best heuristic value for ff(): 22
[t=30.7145s, 108868 KB] g=100, 595443 evaluated, 131195 expanded
[t=32.2813s, 141640 KB] New best heuristic value for ff(): 21
[t=32.2815s, 141640 KB] g=108, 626216 evaluated, 137894 expanded
[t=84.2793s, 309800 KB] New best heuristic value for ff(): 20
[t=84.2826s, 309800 KB] g=132, 1651300 evaluated, 363830 expanded
[t=84.4112s, 309800 KB] New best heuristic value for ff(): 19
[t=84.4138s, 309800 KB] g=138, 1654049 evaluated, 364392 expanded
[t=88.1662s, 342572 KB] New best heuristic value for ff(): 18
[t=88.167s, 342572 KB] g=156, 1730457 evaluated, 381005 expanded
[t=88.2101s, 342572 KB] New best heuristic value for ff(): 17
[t=88.2125s, 342572 KB] g=162, 1731416 evaluated, 381209 expanded
[t=203.929s, 711820 KB] New best heuristic value for ff(): 15
[t=203.93s, 711820 KB] g=206, 4163014 evaluated, 958280 expanded
[t=203.993s, 711952 KB] New best heuristic value for ff(): 13
[t=203.995s, 711952 KB] g=214, 4164292 evaluated, 958552 expanded
[t=203.995s, 711952 KB] New best heuristic value for ff(): 11
[t=203.996s, 711952 KB] g=216, 4164312 evaluated, 958556 expanded
[t=213.499s, 734140 KB] New best heuristic value for ff(): 10
[t=213.503s, 734140 KB] g=260, 4365211 evaluated, 1002640 expanded
[t=279.644s, 1042264 KB] New best heuristic value for ff(): 9
[t=279.646s, 1042264 KB] g=268, 5828052 evaluated, 1347059 expanded
[t=279.648s, 1042264 KB] New best heuristic value for ff(): 8
[t=279.65s, 1042264 KB] g=272, 5828142 evaluated, 1347077 expanded
[t=279.65s, 1042264 KB] New best heuristic value for ff(): 6
[t=279.651s, 1042264 KB] g=274, 5828164 evaluated, 1347081 expanded
[t=280.963s, 1042264 KB] New best heuristic value for ff(): 4
[t=280.966s, 1042264 KB] g=290, 5860135 evaluated, 1353852 expanded
[t=280.987s, 1042264 KB] New best heuristic value for ff(): 2
[t=280.988s, 1042264 KB] g=298, 5860699 evaluated, 1353972 expanded
[t=280.988s, 1042264 KB] New best heuristic value for ff(): 1
[t=280.988s, 1042264 KB] g=299, 5860704 evaluated, 1353973 expanded
[t=280.988s, 1042264 KB] New best heuristic value for ff(): 0
[t=280.989s, 1042264 KB] g=300, 5860709 evaluated, 1353974 expanded
[t=280.989s, 1042264 KB] Solution found!
[t=280.989s, 1042264 KB] Actual search time: 280.972s
unstack b15 b7 (1)
stack b15 b1 (1)
unstack b7 b20 (1)
putdown b7 (1)
unstack b20 b28 (1)
stack b20 b7 (1)
unstack b6 b22 (1)
stack b6 b20 (1)
unstack b28 b21 (1)
stack b28 b22 (1)
pickup b21 (1)
stack b21 b26 (1)
unstack b15 b1 (1)
stack b15 b10 (1)
unstack b1 b11 (1)
stack b1 b28 (1)
unstack b11 b17 (1)
putdown b11 (1)
pickup b2 (1)
stack b2 b11 (1)
unstack b15 b10 (1)
stack b15 b1 (1)
unstack b10 b5 (1)
stack b10 b15 (1)
unstack b5 b3 (1)
putdown b5 (1)
unstack b17 b9 (1)
stack b17 b3 (1)
unstack b9 b23 (1)
stack b9 b2 (1)
unstack b23 b24 (1)
stack b23 b6 (1)
unstack b24 b14 (1)
stack b24 b17 (1)
unstack b10 b15 (1)
stack b10 b23 (1)
unstack b15 b1 (1)
stack b15 b24 (1)
unstack b14 b16 (1)
putdown b14 (1)
pickup b16 (1)
stack b16 b21 (1)
unstack b10 b23 (1)
stack b10 b16 (1)
unstack b9 b2 (1)
stack b9 b23 (1)
unstack b1 b28 (1)
stack b1 b14 (1)
unstack b28 b22 (1)
stack b28 b15 (1)
unstack b1 b14 (1)
stack b1 b28 (1)
unstack b22 b18 (1)
stack b22 b1 (1)
unstack b10 b16 (1)
stack b10 b14 (1)
unstack b18 b8 (1)
stack b18 b16 (1)
unstack b8 b19 (1)
putdown b8 (1)
unstack b19 b4 (1)
stack b19 b2 (1)
pickup b4 (1)
stack b4 b10 (1)
unstack b9 b23 (1)
stack b9 b8 (1)
unstack b23 b6 (1)
stack b23 b4 (1)
pickup b5 (1)
stack b5 b23 (1)
unstack b9 b8 (1)
stack b9 b5 (1)
unstack b22 b1 (1)
stack b22 b18 (1)
unstack b1 b28 (1)
putdown b1 (1)
unstack b28 b15 (1)
stack b28 b19 (1)
pickup b1 (1)
stack b1 b28 (1)
unstack b22 b18 (1)
stack b22 b1 (1)
unstack b9 b5 (1)
stack b9 b8 (1)
unstack b5 b23 (1)
stack b5 b22 (1)
unstack b23 b4 (1)
stack b23 b6 (1)
unstack b4 b10 (1)
stack b4 b15 (1)
unstack b23 b6 (1)
stack b23 b4 (1)
unstack b10 b14 (1)
stack b10 b18 (1)
unstack b9 b8 (1)
stack b9 b10 (1)
pickup b14 (1)
stack b14 b8 (1)
unstack b5 b22 (1)
putdown b5 (1)
unstack b9 b10 (1)
stack b9 b5 (1)
unstack b10 b18 (1)
stack b10 b22 (1)
unstack b23 b4 (1)
stack b23 b18 (1)
unstack b4 b15 (1)
stack b4 b10 (1)
unstack b23 b18 (1)
stack b23 b4 (1)
unstack b9 b5 (1)
stack b9 b23 (1)
pickup b5 (1)
stack b5 b15 (1)
unstack b18 b16 (1)
stack b18 b5 (1)
unstack b16 b21 (1)
stack b16 b14 (1)
unstack b18 b5 (1)
stack b18 b16 (1)
unstack b21 b26 (1)
stack b21 b18 (1)
unstack b26 b25 (1)
stack b26 b9 (1)
unstack b25 b13 (1)
putdown b25 (1)
unstack b21 b18 (1)
stack b21 b26 (1)
unstack b18 b16 (1)
stack b18 b25 (1)
unstack b16 b14 (1)
stack b16 b21 (1)
unstack b18 b25 (1)
stack b18 b16 (1)
pickup b25 (1)
stack b25 b6 (1)
unstack b5 b15 (1)
stack b5 b14 (1)
unstack b15 b24 (1)
stack b15 b5 (1)
unstack b24 b17 (1)
stack b24 b13 (1)
unstack b15 b5 (1)
stack b15 b24 (1)
unstack b17 b3 (1)
stack b17 b25 (1)
unstack b3 b27 (1)
stack b3 b18 (1)
unstack b17 b25 (1)
stack b17 b3 (1)
unstack b5 b14 (1)
stack b5 b27 (1)
unstack b25 b6 (1)
putdown b25 (1)
unstack b17 b3 (1)
stack b17 b15 (1)
unstack b3 b18 (1)
stack b3 b5 (1)
unstack b18 b16 (1)
stack b18 b25 (1)
unstack b3 b5 (1)
stack b3 b18 (1)
unstack b17 b15 (1)
stack b17 b3 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b13 (1)
stack b24 b17 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
unstack b16 b21 (1)
stack b16 b13 (1)
unstack b21 b26 (1)
stack b21 b14 (1)
unstack b16 b13 (1)
stack b16 b21 (1)
unstack b26 b9 (1)
stack b26 b13 (1)
unstack b9 b23 (1)
stack b9 b15 (1)
unstack b26 b13 (1)
stack b26 b9 (1)
unstack b16 b21 (1)
stack b16 b13 (1)
unstack b21 b14 (1)
stack b21 b26 (1)
unstack b16 b13 (1)
stack b16 b21 (1)
unstack b23 b4 (1)
stack b23 b6 (1)
unstack b5 b27 (1)
stack b5 b13 (1)
pickup b27 (1)
stack b27 b23 (1)
unstack b5 b13 (1)
stack b5 b27 (1)
unstack b4 b10 (1)
stack b4 b14 (1)
unstack b10 b22 (1)
stack b10 b13 (1)
unstack b4 b14 (1)
stack b4 b10 (1)
unstack b5 b27 (1)
stack b5 b14 (1)
unstack b27 b23 (1)
stack b27 b16 (1)
unstack b23 b6 (1)
stack b23 b4 (1)
unstack b27 b16 (1)
stack b27 b23 (1)
unstack b5 b14 (1)
stack b5 b27 (1)
unstack b16 b21 (1)
stack b16 b14 (1)
unstack b21 b26 (1)
stack b21 b22 (1)
unstack b16 b14 (1)
stack b16 b21 (1)
unstack b26 b9 (1)
stack b26 b16 (1)
unstack b9 b15 (1)
stack b9 b14 (1)
unstack b26 b16 (1)
stack b26 b9 (1)
unstack b16 b21 (1)
stack b16 b15 (1)
unstack b21 b22 (1)
stack b21 b26 (1)
unstack b16 b15 (1)
stack b16 b21 (1)
unstack b15 b24 (1)
stack b15 b16 (1)
unstack b24 b17 (1)
putdown b24 (1)
unstack b15 b16 (1)
stack b15 b24 (1)
unstack b17 b3 (1)
stack b17 b6 (1)
unstack b3 b18 (1)
stack b3 b5 (1)
unstack b18 b25 (1)
putdown b18 (1)
unstack b3 b5 (1)
stack b3 b18 (1)
unstack b17 b6 (1)
stack b17 b3 (1)
unstack b15 b24 (1)
stack b15 b25 (1)
pickup b24 (1)
stack b24 b17 (1)
unstack b15 b25 (1)
stack b15 b24 (1)
unstack b16 b21 (1)
stack b16 b25 (1)
unstack b21 b26 (1)
stack b21 b15 (1)
unstack b16 b25 (1)
stack b16 b21 (1)
unstack b26 b9 (1)
stack b26 b16 (1)
unstack b9 b14 (1)
stack b9 b25 (1)
unstack b26 b16 (1)
stack b26 b9 (1)
unstack b16 b21 (1)
stack b16 b14 (1)
unstack b21 b15 (1)
stack b21 b26 (1)
unstack b16 b14 (1)
stack b16 b21 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b17 (1)
stack b24 b15 (1)
unstack b17 b3 (1)
stack b17 b22 (1)
unstack b24 b15 (1)
stack b24 b17 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
unstack b3 b18 (1)
stack b3 b14 (1)
pickup b18 (1)
stack b18 b16 (1)
unstack b3 b14 (1)
stack b3 b18 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b17 (1)
stack b24 b15 (1)
unstack b17 b22 (1)
stack b17 b3 (1)
unstack b24 b15 (1)
stack b24 b17 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
[t=280.989s, 1042264 KB] Plan length: 296 step(s).
[t=280.989s, 1042264 KB] Plan cost: 296
[t=280.989s, 1042264 KB] Timestamp: 1685737520296 millisecond(s).
[t=280.989s, 1042264 KB] Expanded 1353976 state(s).
[t=280.989s, 1042264 KB] Reopened 0 state(s).
[t=280.989s, 1042264 KB] Evaluated 5860717 state(s).
[t=280.989s, 1042264 KB] Evaluations: 5860717
[t=280.989s, 1042264 KB] Generated 8349661 state(s).
[t=280.989s, 1042264 KB] Dead ends: 0 state(s).
[t=280.989s, 1042264 KB] Number of registered states: 5860717
[t=280.989s, 1042264 KB] Int hash set load factor: 5860717/8388608 = 0.698652
[t=280.989s, 1042264 KB] Int hash set resizes: 23
[t=280.989s, 1042264 KB] Search time: 280.972s
[t=280.989s, 1042264 KB] Total time: 280.989s
Solution found.
Peak memory: 1042264 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 296 

Successful plans:
Value: 296
 sas_plan 296 

validate exit code: 0

INFO     Planner time: 284.24s
