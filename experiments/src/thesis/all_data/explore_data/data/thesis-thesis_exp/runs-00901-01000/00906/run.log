INFO     planner time limit: 900s
INFO     planner memory limit: 3584 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 899s
INFO     translator memory limit: 3584 MB
INFO     translator command line string: /usr/local/downward-projects/downward/experiments/.venv/bin/python3 /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 21 rules.
Computing model... [0.030s CPU, 0.031s wall-clock]
3500 relevant atoms
2343 auxiliary atoms
5843 final queue length
10269 total queue pushes
Completing instantiation... [0.070s CPU, 0.067s wall-clock]
Instantiating: [0.100s CPU, 0.102s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.003s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
34 uncovered facts
Choosing groups: [0.000s CPU, 0.003s wall-clock]
Building translation key... [0.010s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.017s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.002s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.003s wall-clock]
Translating task: [0.070s CPU, 0.079s wall-clock]
3234 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
66 propositions removed
Detecting unreachable propositions: [0.040s CPU, 0.040s wall-clock]
Reordering and filtering variables...
67 of 67 variables necessary.
34 of 67 mutex groups necessary.
2178 of 2178 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.019s wall-clock]
Translator variables: 67
Translator derived variables: 0
Translator facts: 1190
Translator goal facts: 28
Translator mutex groups: 34
Translator total mutex groups size: 1156
Translator operators: 2178
Translator axioms: 0
Translator task size: 18677
Translator peak memory: 43892 KB
Writing output... [0.020s CPU, 0.014s wall-clock]
Done! [0.270s CPU, 0.282s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 899s
INFO     search memory limit: 3584 MB
INFO     search command line string: /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/downward --evaluator 'h=ff(transform=adapt_costs(one))' --search 'eager(alt([single(h), linear_weighted_type_based([h, g()], ignore_size=true)]), cost_type=one)' --internal-plan-file sas_plan < output.sas
[t=0.00105166s, 11200 KB] reading input...
[t=0.0125803s, 13644 KB] done reading input!
[t=0.0146474s, 14416 KB] Simplifying 8646 unary operators... done! [6534 unary operators]
[t=0.0198466s, 15076 KB] time to simplify: 0.00519918s
[t=0.0201051s, 15076 KB] Initializing additive heuristic...
[t=0.0203458s, 15076 KB] Initializing FF heuristic...
[t=0.0203724s, 15076 KB] Building successor generator...done!
[t=0.0211053s, 15076 KB] peak memory difference for successor generator creation: 0 KB
[t=0.021162s, 15076 KB] time for successor generation creation: 0.000357053s
[t=0.0211871s, 15076 KB] Variables: 67
[t=0.0212274s, 15076 KB] FactPairs: 1190
[t=0.0212501s, 15076 KB] Bytes per state: 32
[t=0.0212735s, 15076 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0213362s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 60
[t=0.0214642s, 15076 KB] g=0, 1 evaluated, 0 expanded
[t=0.021488s, 15076 KB] Initial heuristic value for ff(transform=adapt_costs(one)): 60
[t=0.0215184s, 15076 KB] pruning method: none
[t=0.0215419s, 15076 KB] Start Timestep: 1685477002677 millisecond(s).
[t=0.0217519s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 59
[t=0.0223119s, 15076 KB] g=2, 10 evaluated, 3 expanded
[t=0.0994357s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 58
[t=0.100196s, 15076 KB] g=12, 1075 evaluated, 273 expanded
[t=0.109s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 57
[t=0.109423s, 15076 KB] g=16, 1200 evaluated, 303 expanded
[t=0.109843s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 56
[t=0.110646s, 15076 KB] g=18, 1216 evaluated, 306 expanded
[t=0.112967s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 55
[t=0.113696s, 15076 KB] g=22, 1257 evaluated, 314 expanded
[t=0.127638s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 53
[t=0.128007s, 15076 KB] g=20, 1454 evaluated, 352 expanded
[t=0.143362s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 52
[t=0.144393s, 15076 KB] g=24, 1681 evaluated, 396 expanded
[t=0.438118s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 51
[t=0.439069s, 15076 KB] g=30, 5727 evaluated, 1190 expanded
[t=2.14218s, 16548 KB] New best heuristic value for ff(transform=adapt_costs(one)): 50
[t=2.14255s, 16548 KB] g=32, 29503 evaluated, 5805 expanded
[t=2.26012s, 17064 KB] New best heuristic value for ff(transform=adapt_costs(one)): 49
[t=2.26037s, 17064 KB] g=40, 31112 evaluated, 6082 expanded
[t=2.26175s, 17064 KB] New best heuristic value for ff(transform=adapt_costs(one)): 48
[t=2.26198s, 17064 KB] g=42, 31133 evaluated, 6085 expanded
[t=2.26802s, 17064 KB] New best heuristic value for ff(transform=adapt_costs(one)): 46
[t=2.26868s, 17064 KB] g=44, 31225 evaluated, 6097 expanded
[t=2.27545s, 17064 KB] New best heuristic value for ff(transform=adapt_costs(one)): 45
[t=2.2762s, 17064 KB] g=46, 31329 evaluated, 6109 expanded
[t=4.0827s, 18548 KB] New best heuristic value for ff(transform=adapt_costs(one)): 43
[t=4.08282s, 18548 KB] g=70, 56667 evaluated, 9769 expanded
[t=4.08474s, 18548 KB] New best heuristic value for ff(transform=adapt_costs(one)): 42
[t=4.08483s, 18548 KB] g=72, 56694 evaluated, 9772 expanded
[t=4.11614s, 18548 KB] New best heuristic value for ff(transform=adapt_costs(one)): 40
[t=4.11713s, 18548 KB] g=76, 57143 evaluated, 9831 expanded
[t=4.36814s, 19576 KB] New best heuristic value for ff(transform=adapt_costs(one)): 39
[t=4.36894s, 19576 KB] g=84, 60607 evaluated, 10321 expanded
[t=4.43103s, 19576 KB] New best heuristic value for ff(transform=adapt_costs(one)): 38
[t=4.43132s, 19576 KB] g=88, 61479 evaluated, 10438 expanded
[t=9.89841s, 25100 KB] New best heuristic value for ff(transform=adapt_costs(one)): 37
[t=9.89883s, 25100 KB] g=124, 138759 evaluated, 23597 expanded
[t=10.334s, 25508 KB] New best heuristic value for ff(transform=adapt_costs(one)): 35
[t=10.3342s, 25508 KB] g=126, 144953 evaluated, 24612 expanded
[t=10.3382s, 25508 KB] New best heuristic value for ff(transform=adapt_costs(one)): 34
[t=10.3386s, 25508 KB] g=128, 145013 evaluated, 24621 expanded
[t=10.505s, 25640 KB] New best heuristic value for ff(transform=adapt_costs(one)): 33
[t=10.5052s, 25640 KB] g=134, 147398 evaluated, 25000 expanded
[t=10.5837s, 25772 KB] New best heuristic value for ff(transform=adapt_costs(one)): 32
[t=10.5842s, 25772 KB] g=140, 148515 evaluated, 25195 expanded
[t=10.5857s, 25772 KB] New best heuristic value for ff(transform=adapt_costs(one)): 30
[t=10.5867s, 25772 KB] g=142, 148550 evaluated, 25201 expanded
[t=10.8691s, 25904 KB] New best heuristic value for ff(transform=adapt_costs(one)): 29
[t=10.8693s, 25904 KB] g=154, 152561 evaluated, 25952 expanded
[t=10.8701s, 25904 KB] New best heuristic value for ff(transform=adapt_costs(one)): 28
[t=10.8702s, 25904 KB] g=156, 152573 evaluated, 25954 expanded
[t=10.8722s, 26036 KB] New best heuristic value for ff(transform=adapt_costs(one)): 26
[t=10.8723s, 26036 KB] g=158, 152601 evaluated, 25958 expanded
[t=13.2114s, 28048 KB] New best heuristic value for ff(transform=adapt_costs(one)): 24
[t=13.2124s, 28048 KB] g=170, 186464 evaluated, 31928 expanded
[t=178.803s, 202880 KB] New best heuristic value for ff(transform=adapt_costs(one)): 22
[t=178.804s, 202880 KB] g=348, 2571971 evaluated, 476674 expanded
[t=180.377s, 204348 KB] New best heuristic value for ff(transform=adapt_costs(one)): 21
[t=180.377s, 204348 KB] g=358, 2595894 evaluated, 480781 expanded
[t=180.379s, 204348 KB] New best heuristic value for ff(transform=adapt_costs(one)): 20
[t=180.38s, 204348 KB] g=360, 2595925 evaluated, 480785 expanded
[t=180.382s, 204348 KB] New best heuristic value for ff(transform=adapt_costs(one)): 19
[t=180.383s, 204348 KB] g=362, 2595968 evaluated, 480791 expanded
[t=189.429s, 212688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 18
[t=189.429s, 212688 KB] g=380, 2733804 evaluated, 506637 expanded
[t=189.43s, 212688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 17
[t=189.431s, 212688 KB] g=382, 2733827 evaluated, 506641 expanded
[t=189.515s, 212824 KB] New best heuristic value for ff(transform=adapt_costs(one)): 15
[t=189.515s, 212824 KB] g=386, 2735107 evaluated, 506888 expanded
[t=189.517s, 212824 KB] New best heuristic value for ff(transform=adapt_costs(one)): 13
[t=189.517s, 212824 KB] g=388, 2735130 evaluated, 506892 expanded
[t=189.591s, 212824 KB] New best heuristic value for ff(transform=adapt_costs(one)): 11
[t=189.592s, 212824 KB] g=396, 2736323 evaluated, 507132 expanded
[t=189.593s, 212824 KB] New best heuristic value for ff(transform=adapt_costs(one)): 9
[t=189.594s, 212824 KB] g=398, 2736344 evaluated, 507136 expanded
[t=195.763s, 219672 KB] New best heuristic value for ff(transform=adapt_costs(one)): 8
[t=195.764s, 219672 KB] g=440, 2846377 evaluated, 531364 expanded
[t=195.769s, 219672 KB] New best heuristic value for ff(transform=adapt_costs(one)): 7
[t=195.77s, 219672 KB] g=444, 2846500 evaluated, 531390 expanded
[t=195.77s, 219672 KB] New best heuristic value for ff(transform=adapt_costs(one)): 5
[t=195.771s, 219672 KB] g=446, 2846519 evaluated, 531394 expanded
[t=195.803s, 219672 KB] New best heuristic value for ff(transform=adapt_costs(one)): 3
[t=195.803s, 219672 KB] g=458, 2847144 evaluated, 531535 expanded
[t=195.807s, 219672 KB] New best heuristic value for ff(transform=adapt_costs(one)): 2
[t=195.807s, 219672 KB] g=462, 2847213 evaluated, 531549 expanded
[t=195.807s, 219672 KB] New best heuristic value for ff(transform=adapt_costs(one)): 1
[t=195.807s, 219672 KB] g=463, 2847222 evaluated, 531551 expanded
[t=195.807s, 219672 KB] New best heuristic value for ff(transform=adapt_costs(one)): 0
[t=195.808s, 219672 KB] g=464, 2847228 evaluated, 531553 expanded
[t=195.808s, 219672 KB] Solution found!
[t=195.808s, 219672 KB] Actual search time: 195.787s
unstack b10 b9 (1)
putdown b10 (1)
unstack b9 b1 (1)
stack b9 b31 (1)
unstack b16 b27 (1)
stack b16 b25 (1)
unstack b1 b12 (1)
stack b1 b16 (1)
unstack b27 b6 (1)
stack b27 b9 (1)
unstack b12 b32 (1)
stack b12 b1 (1)
unstack b6 b21 (1)
stack b6 b27 (1)
unstack b21 b4 (1)
putdown b21 (1)
unstack b4 b29 (1)
stack b4 b21 (1)
unstack b32 b26 (1)
stack b32 b4 (1)
unstack b26 b14 (1)
stack b26 b10 (1)
unstack b6 b27 (1)
stack b6 b14 (1)
unstack b27 b9 (1)
stack b27 b29 (1)
unstack b9 b31 (1)
putdown b9 (1)
unstack b31 b33 (1)
stack b31 b12 (1)
unstack b26 b10 (1)
stack b26 b31 (1)
unstack b27 b29 (1)
putdown b27 (1)
unstack b33 b20 (1)
stack b33 b26 (1)
unstack b20 b5 (1)
stack b20 b32 (1)
unstack b5 b23 (1)
putdown b5 (1)
unstack b23 b8 (1)
putdown b23 (1)
unstack b8 b3 (1)
stack b8 b5 (1)
unstack b33 b26 (1)
stack b33 b3 (1)
unstack b20 b32 (1)
putdown b20 (1)
pickup b9 (1)
stack b9 b33 (1)
pickup b27 (1)
stack b27 b23 (1)
unstack b29 b17 (1)
stack b29 b20 (1)
unstack b17 b13 (1)
stack b17 b9 (1)
unstack b13 b19 (1)
stack b13 b32 (1)
unstack b27 b23 (1)
stack b27 b13 (1)
unstack b19 b15 (1)
stack b19 b23 (1)
unstack b15 b11 (1)
stack b15 b27 (1)
unstack b29 b20 (1)
stack b29 b11 (1)
pickup b20 (1)
stack b20 b19 (1)
unstack b17 b9 (1)
stack b17 b26 (1)
unstack b9 b33 (1)
stack b9 b15 (1)
unstack b29 b11 (1)
stack b29 b10 (1)
unstack b11 b28 (1)
stack b11 b33 (1)
unstack b28 b24 (1)
stack b28 b17 (1)
pickup b24 (1)
stack b24 b11 (1)
unstack b28 b17 (1)
stack b28 b20 (1)
unstack b17 b26 (1)
stack b17 b24 (1)
unstack b28 b20 (1)
stack b28 b26 (1)
unstack b29 b10 (1)
stack b29 b28 (1)
unstack b9 b15 (1)
stack b9 b10 (1)
unstack b17 b24 (1)
stack b17 b8 (1)
unstack b29 b28 (1)
stack b29 b9 (1)
unstack b17 b8 (1)
stack b17 b29 (1)
unstack b6 b14 (1)
stack b6 b28 (1)
unstack b14 b22 (1)
stack b14 b20 (1)
unstack b6 b28 (1)
putdown b6 (1)
unstack b22 b18 (1)
stack b22 b8 (1)
unstack b28 b26 (1)
stack b28 b22 (1)
pickup b6 (1)
stack b6 b14 (1)
unstack b18 b2 (1)
stack b18 b28 (1)
unstack b2 b7 (1)
stack b2 b15 (1)
pickup b7 (1)
stack b7 b26 (1)
unstack b17 b29 (1)
stack b17 b2 (1)
unstack b29 b9 (1)
stack b29 b24 (1)
unstack b9 b10 (1)
stack b9 b7 (1)
unstack b18 b28 (1)
stack b18 b10 (1)
unstack b17 b2 (1)
stack b17 b18 (1)
unstack b2 b15 (1)
stack b2 b9 (1)
unstack b17 b18 (1)
stack b17 b2 (1)
unstack b29 b24 (1)
stack b29 b17 (1)
unstack b15 b27 (1)
putdown b15 (1)
unstack b27 b13 (1)
stack b27 b28 (1)
unstack b13 b32 (1)
stack b13 b24 (1)
pickup b15 (1)
stack b15 b27 (1)
unstack b6 b14 (1)
stack b6 b15 (1)
unstack b14 b20 (1)
putdown b14 (1)
unstack b6 b15 (1)
stack b6 b14 (1)
unstack b29 b17 (1)
stack b29 b13 (1)
unstack b17 b2 (1)
stack b17 b32 (1)
unstack b2 b9 (1)
stack b2 b20 (1)
unstack b9 b7 (1)
stack b9 b15 (1)
unstack b7 b26 (1)
stack b7 b2 (1)
unstack b9 b15 (1)
stack b9 b7 (1)
unstack b26 b31 (1)
stack b26 b15 (1)
unstack b9 b7 (1)
stack b9 b6 (1)
unstack b7 b2 (1)
stack b7 b26 (1)
unstack b9 b6 (1)
stack b9 b7 (1)
unstack b17 b32 (1)
stack b17 b18 (1)
unstack b29 b13 (1)
stack b29 b32 (1)
unstack b17 b18 (1)
stack b17 b29 (1)
unstack b6 b14 (1)
putdown b6 (1)
unstack b9 b7 (1)
stack b9 b31 (1)
pickup b6 (1)
stack b6 b7 (1)
unstack b9 b31 (1)
stack b9 b2 (1)
unstack b17 b29 (1)
stack b17 b14 (1)
unstack b6 b7 (1)
stack b6 b9 (1)
unstack b7 b26 (1)
stack b7 b29 (1)
unstack b26 b15 (1)
stack b26 b31 (1)
unstack b18 b10 (1)
stack b18 b13 (1)
unstack b15 b27 (1)
stack b15 b10 (1)
unstack b6 b9 (1)
stack b6 b26 (1)
unstack b27 b28 (1)
stack b27 b18 (1)
unstack b28 b22 (1)
stack b28 b9 (1)
unstack b7 b29 (1)
stack b7 b6 (1)
unstack b15 b10 (1)
stack b15 b27 (1)
unstack b17 b14 (1)
stack b17 b29 (1)
unstack b28 b9 (1)
stack b28 b22 (1)
unstack b7 b6 (1)
stack b7 b9 (1)
unstack b15 b27 (1)
stack b15 b10 (1)
unstack b27 b18 (1)
stack b27 b28 (1)
unstack b6 b26 (1)
stack b6 b18 (1)
unstack b17 b29 (1)
stack b17 b27 (1)
unstack b29 b32 (1)
putdown b29 (1)
unstack b26 b31 (1)
stack b26 b29 (1)
unstack b7 b9 (1)
stack b7 b26 (1)
unstack b9 b2 (1)
stack b9 b7 (1)
unstack b6 b18 (1)
stack b6 b14 (1)
unstack b17 b27 (1)
putdown b17 (1)
unstack b15 b10 (1)
stack b15 b27 (1)
unstack b18 b13 (1)
stack b18 b10 (1)
pickup b17 (1)
stack b17 b32 (1)
unstack b9 b7 (1)
stack b9 b18 (1)
unstack b17 b32 (1)
stack b17 b31 (1)
unstack b6 b14 (1)
stack b6 b15 (1)
pickup b14 (1)
stack b14 b2 (1)
unstack b6 b15 (1)
stack b6 b14 (1)
unstack b9 b18 (1)
stack b9 b7 (1)
unstack b17 b31 (1)
stack b17 b32 (1)
unstack b31 b12 (1)
stack b31 b15 (1)
unstack b12 b1 (1)
stack b12 b13 (1)
unstack b1 b16 (1)
stack b1 b6 (1)
unstack b12 b13 (1)
stack b12 b1 (1)
unstack b31 b15 (1)
stack b31 b12 (1)
unstack b17 b32 (1)
stack b17 b13 (1)
unstack b16 b25 (1)
stack b16 b32 (1)
unstack b17 b13 (1)
stack b17 b16 (1)
unstack b9 b7 (1)
stack b9 b13 (1)
unstack b7 b26 (1)
stack b7 b17 (1)
unstack b26 b29 (1)
stack b26 b31 (1)
pickup b29 (1)
stack b29 b25 (1)
unstack b7 b17 (1)
stack b7 b26 (1)
unstack b9 b13 (1)
stack b9 b7 (1)
unstack b17 b16 (1)
stack b17 b9 (1)
unstack b13 b24 (1)
stack b13 b17 (1)
unstack b24 b11 (1)
stack b24 b13 (1)
unstack b11 b33 (1)
stack b11 b29 (1)
unstack b24 b13 (1)
stack b24 b11 (1)
unstack b13 b17 (1)
stack b13 b24 (1)
unstack b33 b3 (1)
stack b33 b13 (1)
unstack b3 b30 (1)
stack b3 b17 (1)
pickup b30 (1)
stack b30 b15 (1)
unstack b3 b17 (1)
stack b3 b16 (1)
unstack b17 b9 (1)
stack b17 b30 (1)
unstack b3 b16 (1)
stack b3 b17 (1)
unstack b33 b13 (1)
stack b33 b3 (1)
unstack b13 b24 (1)
stack b13 b16 (1)
unstack b24 b11 (1)
stack b24 b13 (1)
unstack b11 b29 (1)
stack b11 b33 (1)
unstack b24 b13 (1)
stack b24 b11 (1)
unstack b13 b16 (1)
stack b13 b24 (1)
unstack b18 b10 (1)
putdown b18 (1)
pickup b10 (1)
stack b10 b13 (1)
pickup b18 (1)
stack b18 b10 (1)
unstack b29 b25 (1)
stack b29 b16 (1)
pickup b25 (1)
stack b25 b18 (1)
unstack b29 b16 (1)
stack b29 b25 (1)
unstack b9 b7 (1)
stack b9 b16 (1)
unstack b7 b26 (1)
stack b7 b29 (1)
unstack b9 b16 (1)
stack b9 b7 (1)
unstack b26 b31 (1)
stack b26 b16 (1)
unstack b31 b12 (1)
putdown b31 (1)
unstack b26 b16 (1)
stack b26 b31 (1)
unstack b9 b7 (1)
stack b9 b12 (1)
unstack b7 b29 (1)
stack b7 b26 (1)
unstack b9 b12 (1)
stack b9 b7 (1)
unstack b12 b1 (1)
stack b12 b29 (1)
unstack b1 b6 (1)
putdown b1 (1)
unstack b12 b29 (1)
stack b12 b1 (1)
unstack b6 b14 (1)
stack b6 b12 (1)
unstack b14 b2 (1)
stack b14 b16 (1)
unstack b6 b12 (1)
stack b6 b14 (1)
unstack b12 b1 (1)
stack b12 b2 (1)
pickup b1 (1)
stack b1 b6 (1)
unstack b12 b2 (1)
stack b12 b1 (1)
unstack b9 b7 (1)
stack b9 b12 (1)
unstack b7 b26 (1)
putdown b7 (1)
unstack b9 b12 (1)
stack b9 b7 (1)
unstack b26 b31 (1)
stack b26 b29 (1)
pickup b31 (1)
stack b31 b12 (1)
unstack b26 b29 (1)
stack b26 b31 (1)
unstack b9 b7 (1)
stack b9 b2 (1)
pickup b7 (1)
stack b7 b26 (1)
unstack b9 b2 (1)
stack b9 b7 (1)
[t=195.808s, 219672 KB] Plan length: 376 step(s).
[t=195.808s, 219672 KB] Plan cost: 376
[t=195.808s, 219672 KB] Timestamp: 1685477199628 millisecond(s).
[t=195.808s, 219672 KB] Expanded 531555 state(s).
[t=195.808s, 219672 KB] Reopened 0 state(s).
[t=195.808s, 219672 KB] Evaluated 2847235 state(s).
[t=195.808s, 219672 KB] Evaluations: 2847235
[t=195.808s, 219672 KB] Generated 3904370 state(s).
[t=195.808s, 219672 KB] Dead ends: 0 state(s).
[t=195.808s, 219672 KB] Number of registered states: 2847235
[t=195.808s, 219672 KB] Int hash set load factor: 2847235/4194304 = 0.678834
[t=195.808s, 219672 KB] Int hash set resizes: 22
[t=195.808s, 219672 KB] Search time: 195.787s
[t=195.808s, 219672 KB] Total time: 195.808s
Solution found.
Peak memory: 219672 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 376 

Successful plans:
Value: 376
 sas_plan 376 

validate exit code: 0

INFO     Planner time: 196.22s
