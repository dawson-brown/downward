INFO     planner time limit: 900s
INFO     planner memory limit: 3584 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 899s
INFO     translator memory limit: 3584 MB
INFO     translator command line string: /usr/local/downward-projects/downward/experiments/.venv/bin/python3 /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.022s wall-clock]
2550 relevant atoms
1708 auxiliary atoms
4258 final queue length
7456 total queue pushes
Completing instantiation... [0.050s CPU, 0.041s wall-clock]
Instantiating: [0.070s CPU, 0.066s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
29 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.013s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.063s wall-clock]
2324 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
56 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.029s wall-clock]
Reordering and filtering variables...
57 of 57 variables necessary.
29 of 57 mutex groups necessary.
1568 of 1568 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.014s wall-clock]
Translator variables: 57
Translator derived variables: 0
Translator facts: 870
Translator goal facts: 23
Translator mutex groups: 29
Translator total mutex groups size: 841
Translator operators: 1568
Translator axioms: 0
Translator task size: 13467
Translator peak memory: 40676 KB
Writing output... [0.010s CPU, 0.010s wall-clock]
Done! [0.210s CPU, 0.203s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 899s
INFO     search memory limit: 3584 MB
INFO     search command line string: /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/downward --evaluator 'h=ff(transform=adapt_costs(one))' --search 'eager(alt([single(h), linear_weighted_type_based([h, g()], ignore_size=true)]), cost_type=one)' --internal-plan-file sas_plan < output.sas
[t=0.0025787s, 11200 KB] reading input...
[t=0.010533s, 12792 KB] done reading input!
[t=0.0107405s, 13544 KB] Simplifying 6216 unary operators... done! [4704 unary operators]
[t=0.0159064s, 13808 KB] time to simplify: 0.00516594s
[t=0.0162007s, 13808 KB] Initializing additive heuristic...
[t=0.0163974s, 13808 KB] Initializing FF heuristic...
[t=0.0164246s, 13808 KB] Building successor generator...done!
[t=0.0169828s, 13808 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0170305s, 13808 KB] time for successor generation creation: 0s
[t=0.0170565s, 13808 KB] Variables: 57
[t=0.0170928s, 13808 KB] FactPairs: 870
[t=0.0171157s, 13808 KB] Bytes per state: 24
[t=0.0171397s, 13808 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0171982s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 48
[t=0.0173013s, 13808 KB] g=0, 1 evaluated, 0 expanded
[t=0.017324s, 13808 KB] Initial heuristic value for ff(transform=adapt_costs(one)): 48
[t=0.0173536s, 13808 KB] pruning method: none
[t=0.0173767s, 13808 KB] Start Timestep: 1685490056725 millisecond(s).
[t=0.0222507s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 47
[t=0.0253753s, 13808 KB] g=4, 150 evaluated, 28 expanded
[t=0.0262122s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 45
[t=0.029323s, 13808 KB] g=8, 223 evaluated, 40 expanded
[t=0.0381797s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 44
[t=0.0385643s, 13808 KB] g=16, 396 evaluated, 71 expanded
[t=0.0385916s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 42
[t=0.0413629s, 13808 KB] g=18, 449 evaluated, 78 expanded
[t=0.0421341s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 41
[t=0.0432456s, 13808 KB] g=20, 484 evaluated, 82 expanded
[t=0.0460953s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 40
[t=0.0461382s, 13808 KB] g=22, 538 evaluated, 89 expanded
[t=0.0461655s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 39
[t=0.0474393s, 13808 KB] g=24, 562 evaluated, 93 expanded
[t=0.047465s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 37
[t=0.0484265s, 13808 KB] g=26, 580 evaluated, 95 expanded
[t=0.062011s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 35
[t=0.0644259s, 13808 KB] g=30, 888 evaluated, 134 expanded
[t=0.0659652s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 34
[t=0.0672652s, 13808 KB] g=32, 941 evaluated, 141 expanded
[t=0.133895s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 33
[t=0.137139s, 13808 KB] g=36, 2280 evaluated, 315 expanded
[t=0.141814s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 31
[t=0.142293s, 13808 KB] g=38, 2378 evaluated, 326 expanded
[t=0.213775s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 29
[t=0.217453s, 13808 KB] g=42, 3829 evaluated, 498 expanded
[t=0.261666s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 28
[t=0.263723s, 13808 KB] g=48, 4722 evaluated, 611 expanded
[t=0.265605s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 27
[t=0.266763s, 13808 KB] g=50, 4779 evaluated, 618 expanded
[t=0.273562s, 13808 KB] New best heuristic value for ff(transform=adapt_costs(one)): 26
[t=0.275353s, 13808 KB] g=54, 4943 evaluated, 639 expanded
[t=1.09335s, 14872 KB] New best heuristic value for ff(transform=adapt_costs(one)): 24
[t=1.0951s, 14872 KB] g=64, 20673 evaluated, 2963 expanded
[t=1.09514s, 14872 KB] New best heuristic value for ff(transform=adapt_costs(one)): 23
[t=1.09694s, 14872 KB] g=66, 20707 evaluated, 2967 expanded
[t=1.09726s, 14872 KB] New best heuristic value for ff(transform=adapt_costs(one)): 22
[t=1.10096s, 14872 KB] g=68, 20784 evaluated, 2976 expanded
[t=1.10121s, 14872 KB] New best heuristic value for ff(transform=adapt_costs(one)): 20
[t=1.10222s, 14872 KB] g=70, 20807 evaluated, 2979 expanded
[t=1.18116s, 15004 KB] New best heuristic value for ff(transform=adapt_costs(one)): 19
[t=1.18159s, 15004 KB] g=74, 22377 evaluated, 3184 expanded
[t=1.18162s, 15004 KB] New best heuristic value for ff(transform=adapt_costs(one)): 17
[t=1.18379s, 15004 KB] g=76, 22419 evaluated, 3189 expanded
[t=2.57279s, 16740 KB] New best heuristic value for ff(transform=adapt_costs(one)): 16
[t=2.57354s, 16740 KB] g=96, 50351 evaluated, 7738 expanded
[t=2.57358s, 16740 KB] New best heuristic value for ff(transform=adapt_costs(one)): 15
[t=2.57476s, 16740 KB] g=98, 50374 evaluated, 7741 expanded
[t=2.57479s, 16740 KB] New best heuristic value for ff(transform=adapt_costs(one)): 14
[t=2.57621s, 16740 KB] g=100, 50401 evaluated, 7745 expanded
[t=2.5766s, 16740 KB] New best heuristic value for ff(transform=adapt_costs(one)): 12
[t=2.5774s, 16740 KB] g=102, 50423 evaluated, 7749 expanded
[t=2.58854s, 16740 KB] New best heuristic value for ff(transform=adapt_costs(one)): 11
[t=2.59205s, 16740 KB] g=108, 50721 evaluated, 7798 expanded
[t=5.55s, 20732 KB] New best heuristic value for ff(transform=adapt_costs(one)): 10
[t=5.55196s, 20732 KB] g=138, 112650 evaluated, 19902 expanded
[t=20.506s, 41588 KB] New best heuristic value for ff(transform=adapt_costs(one)): 9
[t=20.5061s, 41588 KB] g=220, 444489 evaluated, 93572 expanded
[t=20.5798s, 41588 KB] New best heuristic value for ff(transform=adapt_costs(one)): 8
[t=20.5834s, 41588 KB] g=228, 446351 evaluated, 93923 expanded
[t=20.5837s, 41588 KB] New best heuristic value for ff(transform=adapt_costs(one)): 7
[t=20.5869s, 41588 KB] g=232, 446427 evaluated, 93938 expanded
[t=20.5869s, 41588 KB] New best heuristic value for ff(transform=adapt_costs(one)): 5
[t=20.5876s, 41588 KB] g=234, 446442 evaluated, 93941 expanded
[t=20.6476s, 41724 KB] New best heuristic value for ff(transform=adapt_costs(one)): 3
[t=20.6481s, 41724 KB] g=246, 448012 evaluated, 94227 expanded
[t=20.6482s, 41724 KB] New best heuristic value for ff(transform=adapt_costs(one)): 2
[t=20.6509s, 41724 KB] g=250, 448089 evaluated, 94242 expanded
[t=20.6509s, 41724 KB] New best heuristic value for ff(transform=adapt_costs(one)): 1
[t=20.651s, 41724 KB] g=251, 448093 evaluated, 94243 expanded
[t=20.6511s, 41724 KB] New best heuristic value for ff(transform=adapt_costs(one)): 0
[t=20.6514s, 41724 KB] g=252, 448103 evaluated, 94245 expanded
[t=20.6515s, 41724 KB] Solution found!
[t=20.6515s, 41724 KB] Actual search time: 20.6341s
unstack b1 b11 (1)
stack b1 b2 (1)
unstack b11 b17 (1)
putdown b11 (1)
unstack b1 b2 (1)
stack b1 b15 (1)
pickup b2 (1)
stack b2 b11 (1)
unstack b1 b15 (1)
stack b1 b10 (1)
unstack b15 b7 (1)
putdown b15 (1)
unstack b17 b9 (1)
stack b17 b6 (1)
unstack b7 b20 (1)
putdown b7 (1)
unstack b20 b28 (1)
stack b20 b7 (1)
unstack b1 b10 (1)
stack b1 b28 (1)
unstack b26 b25 (1)
stack b26 b9 (1)
unstack b25 b13 (1)
putdown b25 (1)
unstack b10 b5 (1)
stack b10 b13 (1)
unstack b17 b6 (1)
stack b17 b10 (1)
unstack b6 b22 (1)
stack b6 b20 (1)
unstack b22 b18 (1)
stack b22 b1 (1)
unstack b18 b8 (1)
stack b18 b25 (1)
unstack b8 b19 (1)
putdown b8 (1)
unstack b19 b4 (1)
stack b19 b2 (1)
unstack b17 b10 (1)
stack b17 b8 (1)
pickup b4 (1)
stack b4 b10 (1)
unstack b5 b3 (1)
stack b5 b17 (1)
unstack b3 b27 (1)
stack b3 b18 (1)
pickup b15 (1)
stack b15 b19 (1)
unstack b5 b17 (1)
stack b5 b27 (1)
unstack b17 b8 (1)
stack b17 b3 (1)
unstack b15 b19 (1)
stack b15 b8 (1)
unstack b26 b9 (1)
stack b26 b15 (1)
unstack b9 b23 (1)
putdown b9 (1)
unstack b26 b15 (1)
stack b26 b9 (1)
unstack b23 b24 (1)
stack b23 b4 (1)
unstack b24 b14 (1)
stack b24 b17 (1)
unstack b15 b8 (1)
stack b15 b24 (1)
unstack b14 b16 (1)
stack b14 b8 (1)
unstack b5 b27 (1)
putdown b5 (1)
pickup b27 (1)
stack b27 b23 (1)
pickup b5 (1)
stack b5 b27 (1)
unstack b26 b9 (1)
stack b26 b22 (1)
pickup b9 (1)
stack b9 b6 (1)
unstack b26 b22 (1)
stack b26 b9 (1)
unstack b22 b1 (1)
putdown b22 (1)
unstack b1 b28 (1)
stack b1 b26 (1)
pickup b16 (1)
stack b16 b15 (1)
unstack b28 b21 (1)
stack b28 b19 (1)
unstack b1 b26 (1)
stack b1 b28 (1)
unstack b16 b15 (1)
stack b16 b21 (1)
pickup b22 (1)
stack b22 b1 (1)
unstack b26 b9 (1)
stack b26 b14 (1)
unstack b9 b6 (1)
stack b9 b22 (1)
unstack b26 b14 (1)
stack b26 b9 (1)
unstack b16 b21 (1)
stack b16 b14 (1)
pickup b21 (1)
stack b21 b26 (1)
unstack b16 b14 (1)
stack b16 b21 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b17 (1)
stack b24 b5 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
unstack b14 b8 (1)
putdown b14 (1)
pickup b8 (1)
stack b8 b6 (1)
pickup b14 (1)
stack b14 b8 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b5 (1)
stack b24 b17 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
unstack b16 b21 (1)
stack b16 b14 (1)
unstack b21 b26 (1)
stack b21 b15 (1)
unstack b16 b14 (1)
stack b16 b21 (1)
unstack b26 b9 (1)
stack b26 b14 (1)
unstack b9 b22 (1)
stack b9 b5 (1)
unstack b26 b14 (1)
stack b26 b9 (1)
unstack b16 b21 (1)
stack b16 b14 (1)
unstack b21 b15 (1)
stack b21 b26 (1)
unstack b16 b14 (1)
stack b16 b21 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b17 (1)
putdown b24 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
unstack b17 b3 (1)
stack b17 b14 (1)
unstack b3 b18 (1)
stack b3 b22 (1)
unstack b18 b25 (1)
stack b18 b16 (1)
unstack b3 b22 (1)
stack b3 b18 (1)
unstack b17 b14 (1)
stack b17 b3 (1)
unstack b15 b24 (1)
stack b15 b25 (1)
pickup b24 (1)
stack b24 b17 (1)
unstack b15 b25 (1)
stack b15 b24 (1)
unstack b14 b8 (1)
stack b14 b22 (1)
unstack b8 b6 (1)
putdown b8 (1)
unstack b14 b22 (1)
stack b14 b8 (1)
pickup b25 (1)
stack b25 b14 (1)
unstack b15 b24 (1)
stack b15 b25 (1)
unstack b24 b17 (1)
stack b24 b6 (1)
unstack b15 b25 (1)
stack b15 b24 (1)
unstack b17 b3 (1)
putdown b17 (1)
unstack b3 b18 (1)
putdown b3 (1)
pickup b17 (1)
stack b17 b3 (1)
unstack b15 b24 (1)
stack b15 b18 (1)
unstack b24 b6 (1)
stack b24 b17 (1)
unstack b15 b18 (1)
stack b15 b24 (1)
unstack b25 b14 (1)
putdown b25 (1)
unstack b18 b16 (1)
stack b18 b14 (1)
unstack b16 b21 (1)
stack b16 b25 (1)
unstack b18 b14 (1)
stack b18 b16 (1)
unstack b21 b26 (1)
stack b21 b22 (1)
unstack b18 b16 (1)
putdown b18 (1)
unstack b16 b25 (1)
stack b16 b21 (1)
pickup b18 (1)
stack b18 b16 (1)
unstack b26 b9 (1)
stack b26 b15 (1)
unstack b9 b5 (1)
stack b9 b25 (1)
unstack b26 b15 (1)
stack b26 b9 (1)
unstack b18 b16 (1)
stack b18 b14 (1)
unstack b16 b21 (1)
stack b16 b15 (1)
unstack b18 b14 (1)
stack b18 b16 (1)
unstack b21 b22 (1)
stack b21 b26 (1)
unstack b18 b16 (1)
stack b18 b14 (1)
unstack b16 b15 (1)
stack b16 b21 (1)
unstack b18 b14 (1)
stack b18 b16 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b17 (1)
stack b24 b22 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
unstack b17 b3 (1)
stack b17 b14 (1)
pickup b3 (1)
stack b3 b18 (1)
unstack b17 b14 (1)
stack b17 b3 (1)
unstack b15 b24 (1)
stack b15 b14 (1)
unstack b24 b22 (1)
stack b24 b17 (1)
unstack b15 b14 (1)
stack b15 b24 (1)
[t=20.6516s, 41724 KB] Plan length: 244 step(s).
[t=20.6516s, 41724 KB] Plan cost: 244
[t=20.6516s, 41724 KB] Timestamp: 1685490077426 millisecond(s).
[t=20.6516s, 41724 KB] Expanded 94246 state(s).
[t=20.6516s, 41724 KB] Reopened 0 state(s).
[t=20.6516s, 41724 KB] Evaluated 448106 state(s).
[t=20.6516s, 41724 KB] Evaluations: 448106
[t=20.6516s, 41724 KB] Generated 591196 state(s).
[t=20.6516s, 41724 KB] Dead ends: 0 state(s).
[t=20.6516s, 41724 KB] Number of registered states: 448106
[t=20.6516s, 41724 KB] Int hash set load factor: 448106/524288 = 0.854694
[t=20.6516s, 41724 KB] Int hash set resizes: 19
[t=20.6516s, 41724 KB] Search time: 20.6344s
[t=20.6516s, 41724 KB] Total time: 20.6516s
Solution found.
Peak memory: 41724 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 244 

Successful plans:
Value: 244
 sas_plan 244 

validate exit code: 0

INFO     Planner time: 20.95s
