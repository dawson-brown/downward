INFO     planner time limit: 900s
INFO     planner memory limit: 3584 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 899s
INFO     translator memory limit: 3584 MB
INFO     translator command line string: /usr/local/downward-projects/downward/experiments/.venv/bin/python3 /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 21 rules.
Computing model... [0.040s CPU, 0.040s wall-clock]
4600 relevant atoms
3078 auxiliary atoms
7678 final queue length
13537 total queue pushes
Completing instantiation... [0.090s CPU, 0.090s wall-clock]
Instantiating: [0.130s CPU, 0.134s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.004s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
39 uncovered facts
Choosing groups: [0.010s CPU, 0.005s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.022s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.010s CPU, 0.002s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.002s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.004s wall-clock]
Translating task: [0.110s CPU, 0.105s wall-clock]
4294 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
76 propositions removed
Detecting unreachable propositions: [0.080s CPU, 0.085s wall-clock]
Reordering and filtering variables...
77 of 77 variables necessary.
39 of 77 mutex groups necessary.
2888 of 2888 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.025s wall-clock]
Translator variables: 77
Translator derived variables: 0
Translator facts: 1560
Translator goal facts: 33
Translator mutex groups: 39
Translator total mutex groups size: 1521
Translator operators: 2888
Translator axioms: 0
Translator task size: 24737
Translator peak memory: 47760 KB
Writing output... [0.020s CPU, 0.019s wall-clock]
Done! [0.400s CPU, 0.405s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 899s
INFO     search memory limit: 3584 MB
INFO     search command line string: /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/downward --evaluator 'h=ff(transform=adapt_costs(one))' --search 'eager(alt([single(h), softmin_type_based([h, g()], ignore_size=true)]), cost_type=one)' --internal-plan-file sas_plan < output.sas
[t=0s, 11200 KB] reading input...
[t=0.0150875s, 14896 KB] done reading input!
[t=0.0190338s, 15944 KB] Simplifying 11476 unary operators... done! [8664 unary operators]
[t=0.0272894s, 16688 KB] time to simplify: 0.00825557s
[t=0.0279446s, 16688 KB] Initializing additive heuristic...
[t=0.0282587s, 16688 KB] Initializing FF heuristic...
[t=0.0282868s, 16688 KB] Building successor generator...done!
[t=0.0292538s, 16688 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0293202s, 16688 KB] time for successor generation creation: 0s
[t=0.0293453s, 16688 KB] Variables: 77
[t=0.0294078s, 16688 KB] FactPairs: 1560
[t=0.0294315s, 16688 KB] Bytes per state: 36
[t=0.0294548s, 16688 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.02952s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 68
[t=0.0297039s, 16688 KB] g=0, 1 evaluated, 0 expanded
[t=0.0297289s, 16688 KB] Initial heuristic value for ff(transform=adapt_costs(one)): 68
[t=0.0297746s, 16688 KB] pruning method: none
[t=0.0297989s, 16688 KB] Start Timestep: 1685439128917 millisecond(s).
[t=0.0306807s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 67
[t=0.0328459s, 16688 KB] g=2, 32 evaluated, 5 expanded
[t=0.034645s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 66
[t=0.037343s, 16688 KB] g=4, 79 evaluated, 12 expanded
[t=0.0386055s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 65
[t=0.0409807s, 16688 KB] g=8, 117 evaluated, 19 expanded
[t=0.0505665s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 64
[t=0.0524206s, 16688 KB] g=12, 238 evaluated, 38 expanded
[t=0.12652s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 63
[t=0.128009s, 16688 KB] g=16, 1049 evaluated, 153 expanded
[t=0.130434s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 62
[t=0.13147s, 16688 KB] g=18, 1085 evaluated, 157 expanded
[t=0.274444s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 61
[t=0.276401s, 16688 KB] g=20, 2637 evaluated, 370 expanded
[t=0.380433s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 60
[t=0.381843s, 16688 KB] g=34, 3772 evaluated, 551 expanded
[t=0.382264s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 58
[t=0.385376s, 16688 KB] g=36, 3809 evaluated, 556 expanded
[t=0.506205s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 57
[t=0.506727s, 16688 KB] g=48, 5120 evaluated, 741 expanded
[t=0.542139s, 16688 KB] New best heuristic value for ff(transform=adapt_costs(one)): 56
[t=0.544281s, 16688 KB] g=52, 5524 evaluated, 793 expanded
[t=5.92474s, 21316 KB] New best heuristic value for ff(transform=adapt_costs(one)): 55
[t=5.92851s, 21316 KB] g=132, 62626 evaluated, 10399 expanded
[t=5.92868s, 21316 KB] New best heuristic value for ff(transform=adapt_costs(one)): 53
[t=5.9325s, 21316 KB] g=134, 62667 evaluated, 10405 expanded
[t=5.94062s, 21316 KB] New best heuristic value for ff(transform=adapt_costs(one)): 52
[t=5.94169s, 21316 KB] g=138, 62764 evaluated, 10418 expanded
[t=5.98458s, 21316 KB] New best heuristic value for ff(transform=adapt_costs(one)): 51
[t=5.98501s, 21316 KB] g=146, 63227 evaluated, 10482 expanded
[t=6.2085s, 21316 KB] New best heuristic value for ff(transform=adapt_costs(one)): 50
[t=6.20939s, 21316 KB] g=160, 65637 evaluated, 10843 expanded
[t=12.3398s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 49
[t=12.3407s, 26620 KB] g=296, 130802 evaluated, 24385 expanded
[t=12.3437s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 47
[t=12.3438s, 26620 KB] g=298, 130834 evaluated, 24389 expanded
[t=12.3477s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 45
[t=12.348s, 26620 KB] g=300, 130878 evaluated, 24395 expanded
[t=12.3516s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 44
[t=12.3548s, 26620 KB] g=304, 130951 evaluated, 24405 expanded
[t=12.3956s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 43
[t=12.3972s, 26620 KB] g=310, 131416 evaluated, 24471 expanded
[t=12.4395s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 42
[t=12.4427s, 26620 KB] g=316, 131923 evaluated, 24545 expanded
[t=12.4434s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 41
[t=12.4455s, 26620 KB] g=318, 131954 evaluated, 24549 expanded
[t=12.4514s, 26620 KB] New best heuristic value for ff(transform=adapt_costs(one)): 40
[t=12.4515s, 26620 KB] g=322, 132019 evaluated, 24558 expanded
[t=12.7313s, 26788 KB] New best heuristic value for ff(transform=adapt_costs(one)): 39
[t=12.7349s, 26788 KB] g=334, 135191 evaluated, 25044 expanded
[t=31.2924s, 42032 KB] New best heuristic value for ff(transform=adapt_costs(one)): 38
[t=31.2935s, 42032 KB] g=422, 340404 evaluated, 64830 expanded
[t=58.6792s, 65236 KB] New best heuristic value for ff(transform=adapt_costs(one)): 37
[t=58.6796s, 65236 KB] g=538, 638109 evaluated, 125295 expanded
[t=62.969s, 68188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 36
[t=62.9698s, 68188 KB] g=604, 685146 evaluated, 136722 expanded
[t=400.802s, 357720 KB] New best heuristic value for ff(transform=adapt_costs(one)): 35
[t=400.805s, 357720 KB] g=606, 4347023 evaluated, 1194446 expanded
[t=406.709s, 361752 KB] New best heuristic value for ff(transform=adapt_costs(one)): 33
[t=406.712s, 361752 KB] g=648, 4410767 evaluated, 1208637 expanded
[t=406.756s, 361752 KB] New best heuristic value for ff(transform=adapt_costs(one)): 32
[t=406.759s, 361752 KB] g=652, 4411309 evaluated, 1208732 expanded
[t=406.759s, 361752 KB] New best heuristic value for ff(transform=adapt_costs(one)): 30
[t=406.76s, 361752 KB] g=654, 4411326 evaluated, 1208734 expanded
[t=406.776s, 361752 KB] New best heuristic value for ff(transform=adapt_costs(one)): 29
[t=406.78s, 361752 KB] g=660, 4411550 evaluated, 1208772 expanded
[t=406.78s, 361752 KB] New best heuristic value for ff(transform=adapt_costs(one)): 28
[t=406.782s, 361752 KB] g=662, 4411572 evaluated, 1208776 expanded
[t=406.808s, 361752 KB] New best heuristic value for ff(transform=adapt_costs(one)): 27
[t=406.81s, 361752 KB] g=672, 4411902 evaluated, 1208835 expanded
[t=406.81s, 361888 KB] New best heuristic value for ff(transform=adapt_costs(one)): 25
[t=406.811s, 361888 KB] g=674, 4411914 evaluated, 1208837 expanded
[t=406.936s, 361888 KB] New best heuristic value for ff(transform=adapt_costs(one)): 23
[t=406.939s, 361888 KB] g=690, 4413405 evaluated, 1209122 expanded
[t=406.94s, 361888 KB] New best heuristic value for ff(transform=adapt_costs(one)): 22
[t=406.942s, 361888 KB] g=694, 4413443 evaluated, 1209130 expanded
[t=406.942s, 361888 KB] New best heuristic value for ff(transform=adapt_costs(one)): 20
[t=406.944s, 361888 KB] g=696, 4413457 evaluated, 1209133 expanded
[t=407.196s, 362156 KB] New best heuristic value for ff(transform=adapt_costs(one)): 19
[t=407.198s, 362156 KB] g=712, 4416448 evaluated, 1209871 expanded
[t=407.198s, 362156 KB] New best heuristic value for ff(transform=adapt_costs(one)): 17
[t=407.199s, 362156 KB] g=714, 4416458 evaluated, 1209873 expanded
[t=407.204s, 362156 KB] New best heuristic value for ff(transform=adapt_costs(one)): 16
[t=407.205s, 362156 KB] g=720, 4416529 evaluated, 1209893 expanded
[t=407.205s, 362156 KB] New best heuristic value for ff(transform=adapt_costs(one)): 14
[t=407.206s, 362156 KB] g=722, 4416540 evaluated, 1209896 expanded
[t=419.988s, 374084 KB] New best heuristic value for ff(transform=adapt_costs(one)): 13
[t=419.991s, 374084 KB] g=876, 4606407 evaluated, 1265981 expanded
[t=419.992s, 374084 KB] New best heuristic value for ff(transform=adapt_costs(one)): 11
[t=419.992s, 374084 KB] g=878, 4606416 evaluated, 1265983 expanded
[t=420.008s, 374084 KB] New best heuristic value for ff(transform=adapt_costs(one)): 10
[t=420.011s, 374084 KB] g=890, 4606817 evaluated, 1266132 expanded
[t=420.011s, 374084 KB] New best heuristic value for ff(transform=adapt_costs(one)): 9
[t=420.012s, 374084 KB] g=890, 4606826 evaluated, 1266135 expanded
[t=420.012s, 374084 KB] New best heuristic value for ff(transform=adapt_costs(one)): 7
[t=420.012s, 374084 KB] g=892, 4606831 evaluated, 1266137 expanded
[t=420.219s, 374480 KB] New best heuristic value for ff(transform=adapt_costs(one)): 6
[t=420.22s, 374480 KB] g=932, 4612118 evaluated, 1267999 expanded
[t=420.22s, 374480 KB] New best heuristic value for ff(transform=adapt_costs(one)): 4
[t=420.22s, 374480 KB] g=934, 4612126 evaluated, 1268001 expanded
[t=420.243s, 374480 KB] New best heuristic value for ff(transform=adapt_costs(one)): 3
[t=420.244s, 374480 KB] g=944, 4612845 evaluated, 1268233 expanded
[t=420.251s, 374480 KB] New best heuristic value for ff(transform=adapt_costs(one)): 2
[t=420.255s, 374480 KB] g=950, 4613182 evaluated, 1268322 expanded
[t=420.255s, 374480 KB] New best heuristic value for ff(transform=adapt_costs(one)): 1
[t=420.255s, 374480 KB] g=951, 4613184 evaluated, 1268323 expanded
[t=420.255s, 374480 KB] New best heuristic value for ff(transform=adapt_costs(one)): 0
[t=420.255s, 374480 KB] g=952, 4613187 evaluated, 1268324 expanded
[t=420.255s, 374480 KB] Solution found!
[t=420.256s, 374480 KB] Actual search time: 420.226s
unstack b12 b23 (1)
stack b12 b25 (1)
unstack b34 b20 (1)
stack b34 b12 (1)
pickup b27 (1)
stack b27 b31 (1)
unstack b20 b37 (1)
putdown b20 (1)
unstack b23 b15 (1)
stack b23 b20 (1)
unstack b15 b21 (1)
putdown b15 (1)
unstack b37 b17 (1)
stack b37 b27 (1)
unstack b17 b6 (1)
putdown b17 (1)
pickup b6 (1)
stack b6 b23 (1)
unstack b21 b33 (1)
stack b21 b6 (1)
pickup b33 (1)
stack b33 b32 (1)
unstack b37 b27 (1)
stack b37 b21 (1)
unstack b8 b24 (1)
stack b8 b37 (1)
unstack b24 b28 (1)
stack b24 b8 (1)
unstack b33 b32 (1)
stack b33 b15 (1)
unstack b28 b7 (1)
stack b28 b24 (1)
unstack b7 b2 (1)
putdown b7 (1)
unstack b33 b15 (1)
stack b33 b7 (1)
unstack b28 b24 (1)
putdown b28 (1)
unstack b24 b8 (1)
stack b24 b33 (1)
pickup b28 (1)
stack b28 b8 (1)
unstack b2 b14 (1)
stack b2 b34 (1)
unstack b14 b22 (1)
putdown b14 (1)
unstack b22 b10 (1)
stack b22 b2 (1)
unstack b28 b8 (1)
stack b28 b24 (1)
unstack b8 b37 (1)
stack b8 b10 (1)
unstack b37 b21 (1)
stack b37 b8 (1)
pickup b14 (1)
stack b14 b21 (1)
unstack b28 b24 (1)
stack b28 b14 (1)
unstack b24 b33 (1)
stack b24 b28 (1)
unstack b37 b8 (1)
stack b37 b27 (1)
unstack b24 b28 (1)
stack b24 b37 (1)
unstack b32 b26 (1)
stack b32 b28 (1)
unstack b26 b19 (1)
stack b26 b33 (1)
unstack b32 b28 (1)
stack b32 b26 (1)
unstack b19 b5 (1)
stack b19 b24 (1)
unstack b28 b14 (1)
stack b28 b5 (1)
unstack b14 b21 (1)
stack b14 b17 (1)
unstack b19 b24 (1)
stack b19 b32 (1)
unstack b24 b37 (1)
stack b24 b21 (1)
unstack b19 b32 (1)
stack b19 b37 (1)
unstack b14 b17 (1)
stack b14 b22 (1)
unstack b24 b21 (1)
stack b24 b17 (1)
unstack b14 b22 (1)
stack b14 b21 (1)
unstack b28 b5 (1)
stack b28 b8 (1)
pickup b5 (1)
stack b5 b19 (1)
unstack b24 b17 (1)
stack b24 b22 (1)
unstack b28 b8 (1)
stack b28 b5 (1)
pickup b17 (1)
stack b17 b15 (1)
unstack b14 b21 (1)
stack b14 b17 (1)
unstack b24 b22 (1)
putdown b24 (1)
unstack b8 b10 (1)
stack b8 b21 (1)
unstack b10 b9 (1)
stack b10 b22 (1)
unstack b8 b21 (1)
stack b8 b10 (1)
unstack b14 b17 (1)
stack b14 b21 (1)
pickup b9 (1)
stack b9 b14 (1)
pickup b24 (1)
stack b24 b8 (1)
unstack b17 b15 (1)
putdown b17 (1)
unstack b9 b14 (1)
stack b9 b15 (1)
unstack b14 b21 (1)
stack b14 b28 (1)
unstack b24 b8 (1)
stack b24 b21 (1)
unstack b8 b10 (1)
stack b8 b9 (1)
unstack b10 b22 (1)
putdown b10 (1)
unstack b8 b9 (1)
stack b8 b10 (1)
unstack b14 b28 (1)
stack b14 b17 (1)
unstack b9 b15 (1)
stack b9 b28 (1)
unstack b14 b17 (1)
stack b14 b9 (1)
pickup b17 (1)
stack b17 b15 (1)
unstack b24 b21 (1)
stack b24 b8 (1)
unstack b14 b9 (1)
stack b14 b21 (1)
unstack b9 b28 (1)
putdown b9 (1)
unstack b22 b2 (1)
putdown b22 (1)
unstack b2 b34 (1)
stack b2 b28 (1)
pickup b22 (1)
stack b22 b2 (1)
unstack b24 b8 (1)
putdown b24 (1)
pickup b9 (1)
stack b9 b14 (1)
unstack b17 b15 (1)
putdown b17 (1)
unstack b9 b14 (1)
stack b9 b8 (1)
pickup b24 (1)
stack b24 b15 (1)
unstack b14 b21 (1)
putdown b14 (1)
unstack b9 b8 (1)
stack b9 b24 (1)
unstack b34 b12 (1)
stack b34 b32 (1)
unstack b12 b25 (1)
stack b12 b22 (1)
unstack b34 b32 (1)
stack b34 b12 (1)
unstack b25 b1 (1)
stack b25 b32 (1)
unstack b9 b24 (1)
stack b9 b25 (1)
unstack b1 b4 (1)
stack b1 b21 (1)
unstack b4 b30 (1)
stack b4 b8 (1)
unstack b30 b29 (1)
stack b30 b1 (1)
unstack b29 b35 (1)
stack b29 b4 (1)
unstack b35 b16 (1)
stack b35 b29 (1)
unstack b16 b11 (1)
stack b16 b14 (1)
unstack b11 b38 (1)
stack b11 b24 (1)
unstack b30 b1 (1)
stack b30 b16 (1)
unstack b1 b21 (1)
stack b1 b11 (1)
unstack b35 b29 (1)
stack b35 b21 (1)
unstack b38 b18 (1)
stack b38 b29 (1)
unstack b1 b11 (1)
stack b1 b9 (1)
unstack b30 b16 (1)
stack b30 b17 (1)
unstack b16 b14 (1)
putdown b16 (1)
pickup b14 (1)
stack b14 b11 (1)
unstack b30 b17 (1)
stack b30 b16 (1)
unstack b38 b29 (1)
stack b38 b34 (1)
unstack b1 b9 (1)
stack b1 b35 (1)
pickup b17 (1)
stack b17 b18 (1)
unstack b30 b16 (1)
stack b30 b17 (1)
pickup b16 (1)
stack b16 b1 (1)
unstack b30 b17 (1)
stack b30 b16 (1)
unstack b17 b18 (1)
putdown b17 (1)
unstack b38 b34 (1)
stack b38 b18 (1)
unstack b14 b11 (1)
stack b14 b29 (1)
unstack b11 b24 (1)
putdown b11 (1)
unstack b14 b29 (1)
stack b14 b11 (1)
unstack b24 b15 (1)
stack b24 b38 (1)
unstack b14 b11 (1)
stack b14 b15 (1)
pickup b11 (1)
stack b11 b24 (1)
unstack b14 b15 (1)
stack b14 b11 (1)
unstack b30 b16 (1)
stack b30 b15 (1)
unstack b16 b1 (1)
stack b16 b30 (1)
unstack b1 b35 (1)
stack b1 b34 (1)
unstack b16 b30 (1)
stack b16 b1 (1)
unstack b30 b15 (1)
stack b30 b16 (1)
unstack b35 b21 (1)
stack b35 b9 (1)
unstack b21 b6 (1)
putdown b21 (1)
unstack b35 b9 (1)
stack b35 b21 (1)
unstack b6 b23 (1)
stack b6 b9 (1)
unstack b23 b20 (1)
stack b23 b14 (1)
unstack b6 b9 (1)
stack b6 b23 (1)
pickup b17 (1)
stack b17 b20 (1)
unstack b35 b21 (1)
putdown b35 (1)
pickup b21 (1)
stack b21 b6 (1)
pickup b35 (1)
stack b35 b21 (1)
unstack b17 b20 (1)
putdown b17 (1)
pickup b15 (1)
stack b15 b20 (1)
unstack b30 b16 (1)
stack b30 b15 (1)
unstack b16 b1 (1)
stack b16 b35 (1)
unstack b30 b15 (1)
stack b30 b16 (1)
unstack b1 b34 (1)
stack b1 b9 (1)
pickup b17 (1)
stack b17 b15 (1)
unstack b30 b16 (1)
stack b30 b17 (1)
unstack b16 b35 (1)
stack b16 b34 (1)
unstack b30 b17 (1)
stack b30 b16 (1)
unstack b1 b9 (1)
stack b1 b35 (1)
unstack b29 b4 (1)
putdown b29 (1)
unstack b1 b35 (1)
stack b1 b29 (1)
unstack b4 b8 (1)
stack b4 b9 (1)
unstack b1 b29 (1)
putdown b1 (1)
pickup b29 (1)
stack b29 b4 (1)
unstack b8 b10 (1)
stack b8 b17 (1)
pickup b10 (1)
stack b10 b35 (1)
unstack b8 b17 (1)
stack b8 b10 (1)
unstack b29 b4 (1)
stack b29 b17 (1)
unstack b4 b9 (1)
stack b4 b8 (1)
unstack b29 b17 (1)
stack b29 b4 (1)
pickup b1 (1)
stack b1 b29 (1)
unstack b17 b15 (1)
putdown b17 (1)
unstack b15 b20 (1)
putdown b15 (1)
unstack b1 b29 (1)
putdown b1 (1)
unstack b30 b16 (1)
putdown b30 (1)
unstack b16 b34 (1)
stack b16 b20 (1)
pickup b30 (1)
stack b30 b16 (1)
pickup b1 (1)
stack b1 b30 (1)
pickup b17 (1)
stack b17 b15 (1)
unstack b34 b12 (1)
stack b34 b17 (1)
unstack b12 b22 (1)
stack b12 b9 (1)
unstack b34 b17 (1)
stack b34 b12 (1)
unstack b1 b30 (1)
putdown b1 (1)
unstack b22 b2 (1)
putdown b22 (1)
unstack b2 b28 (1)
stack b2 b1 (1)
pickup b22 (1)
stack b22 b2 (1)
unstack b34 b12 (1)
stack b34 b29 (1)
unstack b12 b9 (1)
stack b12 b22 (1)
unstack b34 b29 (1)
stack b34 b12 (1)
unstack b17 b15 (1)
putdown b17 (1)
unstack b30 b16 (1)
stack b30 b28 (1)
unstack b16 b20 (1)
stack b16 b9 (1)
unstack b30 b28 (1)
stack b30 b16 (1)
pickup b15 (1)
stack b15 b20 (1)
unstack b28 b5 (1)
stack b28 b29 (1)
unstack b5 b19 (1)
stack b5 b34 (1)
unstack b28 b29 (1)
stack b28 b5 (1)
unstack b30 b16 (1)
putdown b30 (1)
unstack b16 b9 (1)
putdown b16 (1)
pickup b30 (1)
stack b30 b16 (1)
pickup b17 (1)
stack b17 b15 (1)
unstack b19 b37 (1)
putdown b19 (1)
unstack b37 b27 (1)
stack b37 b9 (1)
pickup b19 (1)
stack b19 b37 (1)
unstack b28 b5 (1)
putdown b28 (1)
unstack b5 b34 (1)
stack b5 b19 (1)
pickup b28 (1)
stack b28 b5 (1)
unstack b27 b31 (1)
stack b27 b29 (1)
unstack b31 b3 (1)
stack b31 b30 (1)
unstack b27 b29 (1)
stack b27 b31 (1)
unstack b3 b36 (1)
stack b3 b29 (1)
unstack b17 b15 (1)
putdown b17 (1)
unstack b15 b20 (1)
putdown b15 (1)
pickup b20 (1)
stack b20 b15 (1)
unstack b36 b13 (1)
stack b36 b3 (1)
pickup b13 (1)
stack b13 b17 (1)
unstack b36 b3 (1)
stack b36 b13 (1)
unstack b20 b15 (1)
putdown b20 (1)
pickup b15 (1)
stack b15 b20 (1)
unstack b27 b31 (1)
stack b27 b3 (1)
unstack b31 b30 (1)
stack b31 b15 (1)
unstack b27 b3 (1)
stack b27 b31 (1)
unstack b30 b16 (1)
stack b30 b34 (1)
pickup b16 (1)
stack b16 b36 (1)
unstack b30 b34 (1)
stack b30 b16 (1)
unstack b27 b31 (1)
stack b27 b28 (1)
unstack b31 b15 (1)
stack b31 b30 (1)
unstack b27 b28 (1)
stack b27 b31 (1)
unstack b15 b20 (1)
putdown b15 (1)
unstack b34 b12 (1)
stack b34 b15 (1)
unstack b12 b22 (1)
stack b12 b3 (1)
unstack b34 b15 (1)
stack b34 b12 (1)
unstack b22 b2 (1)
stack b22 b34 (1)
unstack b2 b1 (1)
stack b2 b20 (1)
pickup b1 (1)
stack b1 b28 (1)
unstack b2 b20 (1)
stack b2 b1 (1)
unstack b22 b34 (1)
stack b22 b2 (1)
pickup b20 (1)
stack b20 b15 (1)
unstack b34 b12 (1)
stack b34 b27 (1)
unstack b12 b3 (1)
stack b12 b22 (1)
unstack b34 b27 (1)
stack b34 b12 (1)
unstack b3 b29 (1)
stack b3 b27 (1)
unstack b29 b4 (1)
putdown b29 (1)
unstack b3 b27 (1)
stack b3 b29 (1)
unstack b4 b8 (1)
stack b4 b20 (1)
unstack b8 b10 (1)
stack b8 b27 (1)
unstack b4 b20 (1)
stack b4 b8 (1)
unstack b20 b15 (1)
stack b20 b34 (1)
unstack b3 b29 (1)
stack b3 b15 (1)
pickup b29 (1)
stack b29 b4 (1)
unstack b3 b15 (1)
stack b3 b29 (1)
unstack b20 b34 (1)
putdown b20 (1)
pickup b15 (1)
stack b15 b20 (1)
unstack b10 b35 (1)
stack b10 b15 (1)
unstack b35 b21 (1)
stack b35 b34 (1)
unstack b10 b15 (1)
stack b10 b35 (1)
unstack b15 b20 (1)
putdown b15 (1)
unstack b3 b29 (1)
stack b3 b20 (1)
pickup b15 (1)
stack b15 b21 (1)
unstack b29 b4 (1)
putdown b29 (1)
unstack b3 b20 (1)
stack b3 b29 (1)
unstack b15 b21 (1)
putdown b15 (1)
unstack b4 b8 (1)
stack b4 b20 (1)
unstack b8 b27 (1)
stack b8 b10 (1)
unstack b4 b20 (1)
stack b4 b8 (1)
pickup b15 (1)
stack b15 b20 (1)
unstack b3 b29 (1)
putdown b3 (1)
pickup b29 (1)
stack b29 b4 (1)
pickup b3 (1)
stack b3 b29 (1)
unstack b15 b20 (1)
putdown b15 (1)
pickup b20 (1)
stack b20 b15 (1)
unstack b21 b6 (1)
stack b21 b3 (1)
unstack b6 b23 (1)
stack b6 b27 (1)
unstack b21 b3 (1)
stack b21 b6 (1)
unstack b23 b14 (1)
stack b23 b3 (1)
unstack b21 b6 (1)
stack b21 b20 (1)
unstack b6 b27 (1)
stack b6 b23 (1)
unstack b21 b20 (1)
stack b21 b6 (1)
unstack b20 b15 (1)
putdown b20 (1)
unstack b14 b11 (1)
stack b14 b15 (1)
unstack b11 b24 (1)
stack b11 b20 (1)
unstack b14 b15 (1)
stack b14 b11 (1)
unstack b24 b38 (1)
putdown b24 (1)
unstack b38 b18 (1)
stack b38 b27 (1)
pickup b24 (1)
stack b24 b38 (1)
unstack b14 b11 (1)
stack b14 b21 (1)
unstack b11 b20 (1)
stack b11 b24 (1)
unstack b14 b21 (1)
stack b14 b11 (1)
pickup b15 (1)
stack b15 b20 (1)
pickup b18 (1)
stack b18 b15 (1)
unstack b21 b6 (1)
stack b21 b18 (1)
unstack b6 b23 (1)
putdown b6 (1)
unstack b23 b3 (1)
stack b23 b14 (1)
pickup b6 (1)
stack b6 b23 (1)
unstack b21 b18 (1)
stack b21 b6 (1)
unstack b18 b15 (1)
putdown b18 (1)
unstack b15 b20 (1)
putdown b15 (1)
pickup b20 (1)
stack b20 b18 (1)
unstack b3 b29 (1)
putdown b3 (1)
unstack b29 b4 (1)
putdown b29 (1)
unstack b4 b8 (1)
stack b4 b15 (1)
pickup b29 (1)
stack b29 b4 (1)
pickup b3 (1)
stack b3 b29 (1)
unstack b20 b18 (1)
putdown b20 (1)
pickup b18 (1)
stack b18 b20 (1)
unstack b8 b10 (1)
stack b8 b21 (1)
unstack b10 b35 (1)
stack b10 b3 (1)
unstack b8 b21 (1)
stack b8 b10 (1)
unstack b35 b34 (1)
stack b35 b21 (1)
unstack b8 b10 (1)
putdown b8 (1)
unstack b10 b3 (1)
stack b10 b35 (1)
pickup b8 (1)
stack b8 b10 (1)
unstack b18 b20 (1)
putdown b18 (1)
unstack b3 b29 (1)
stack b3 b18 (1)
unstack b29 b4 (1)
putdown b29 (1)
unstack b3 b18 (1)
stack b3 b29 (1)
unstack b4 b15 (1)
stack b4 b8 (1)
pickup b18 (1)
stack b18 b20 (1)
unstack b3 b29 (1)
stack b3 b18 (1)
pickup b29 (1)
stack b29 b4 (1)
unstack b3 b18 (1)
stack b3 b29 (1)
[t=420.256s, 374480 KB] Plan length: 610 step(s).
[t=420.256s, 374480 KB] Plan cost: 610
[t=420.256s, 374480 KB] Timestamp: 1685439550135 millisecond(s).
[t=420.256s, 374480 KB] Expanded 1268325 state(s).
[t=420.256s, 374480 KB] Reopened 0 state(s).
[t=420.256s, 374480 KB] Evaluated 4613189 state(s).
[t=420.256s, 374480 KB] Evaluations: 4613189
[t=420.256s, 374480 KB] Generated 7379030 state(s).
[t=420.256s, 374480 KB] Dead ends: 0 state(s).
[t=420.256s, 374480 KB] Number of registered states: 4613189
[t=420.256s, 374480 KB] Int hash set load factor: 4613189/8388608 = 0.549935
[t=420.256s, 374480 KB] Int hash set resizes: 23
[t=420.256s, 374480 KB] Search time: 420.226s
[t=420.256s, 374480 KB] Total time: 420.256s
Solution found.
Peak memory: 374480 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 610 

Successful plans:
Value: 610
 sas_plan 610 

validate exit code: 0

INFO     Planner time: 420.82s
