INFO     planner time limit: 900s
INFO     planner memory limit: 3584 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 899s
INFO     translator memory limit: 3584 MB
INFO     translator command line string: /usr/local/downward-projects/downward/experiments/.venv/bin/python3 /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.010s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 21 rules.
Computing model... [0.030s CPU, 0.031s wall-clock]
3500 relevant atoms
2343 auxiliary atoms
5843 final queue length
10269 total queue pushes
Completing instantiation... [0.060s CPU, 0.066s wall-clock]
Instantiating: [0.100s CPU, 0.100s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.003s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
34 uncovered facts
Choosing groups: [0.000s CPU, 0.003s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.017s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.002s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.003s wall-clock]
Translating task: [0.080s CPU, 0.078s wall-clock]
3234 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
66 propositions removed
Detecting unreachable propositions: [0.040s CPU, 0.040s wall-clock]
Reordering and filtering variables...
67 of 67 variables necessary.
34 of 67 mutex groups necessary.
2178 of 2178 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.019s wall-clock]
Translator variables: 67
Translator derived variables: 0
Translator facts: 1190
Translator goal facts: 28
Translator mutex groups: 34
Translator total mutex groups size: 1156
Translator operators: 2178
Translator axioms: 0
Translator task size: 18677
Translator peak memory: 43892 KB
Writing output... [0.010s CPU, 0.014s wall-clock]
Done! [0.280s CPU, 0.279s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 899s
INFO     search memory limit: 3584 MB
INFO     search command line string: /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/downward --evaluator 'h=ff(transform=adapt_costs(one))' --search 'eager(alt([single(h), softmin_type_based([h, g()], ignore_size=true)]), cost_type=one)' --internal-plan-file sas_plan < output.sas
[t=0.00240078s, 11200 KB] reading input...
[t=0.0103559s, 13644 KB] done reading input!
[t=0.0143068s, 14416 KB] Simplifying 8646 unary operators... done! [6534 unary operators]
[t=0.0205258s, 15076 KB] time to simplify: 0.00621899s
[t=0.0209545s, 15076 KB] Initializing additive heuristic...
[t=0.0211973s, 15076 KB] Initializing FF heuristic...
[t=0.0212247s, 15076 KB] Building successor generator...done!
[t=0.0219935s, 15076 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0220482s, 15076 KB] time for successor generation creation: 0s
[t=0.022073s, 15076 KB] Variables: 67
[t=0.0221175s, 15076 KB] FactPairs: 1190
[t=0.0221431s, 15076 KB] Bytes per state: 32
[t=0.0221661s, 15076 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0222377s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 60
[t=0.0223711s, 15076 KB] g=0, 1 evaluated, 0 expanded
[t=0.0223953s, 15076 KB] Initial heuristic value for ff(transform=adapt_costs(one)): 60
[t=0.0224368s, 15076 KB] pruning method: none
[t=0.0224596s, 15076 KB] Start Timestep: 1685497436882 millisecond(s).
[t=0.0225025s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 59
[t=0.0232265s, 15076 KB] g=2, 10 evaluated, 3 expanded
[t=0.0419897s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 58
[t=0.0422068s, 15076 KB] g=10, 268 evaluated, 64 expanded
[t=0.0459152s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 57
[t=0.0462306s, 15076 KB] g=14, 322 evaluated, 76 expanded
[t=0.0538824s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 56
[t=0.0544744s, 15076 KB] g=18, 434 evaluated, 101 expanded
[t=0.0618433s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 55
[t=0.0630726s, 15076 KB] g=24, 550 evaluated, 129 expanded
[t=0.0631014s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 54
[t=0.064304s, 15076 KB] g=26, 566 evaluated, 132 expanded
[t=0.0643291s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 52
[t=0.0653818s, 15076 KB] g=28, 580 evaluated, 134 expanded
[t=0.0657435s, 15076 KB] New best heuristic value for ff(transform=adapt_costs(one)): 51
[t=0.0679187s, 15076 KB] g=30, 614 evaluated, 139 expanded
[t=1.79372s, 16136 KB] New best heuristic value for ff(transform=adapt_costs(one)): 50
[t=1.79493s, 16136 KB] g=58, 24389 evaluated, 4936 expanded
[t=1.79567s, 16136 KB] New best heuristic value for ff(transform=adapt_costs(one)): 49
[t=1.79634s, 16136 KB] g=60, 24407 evaluated, 4939 expanded
[t=1.79636s, 16136 KB] New best heuristic value for ff(transform=adapt_costs(one)): 47
[t=1.79919s, 16136 KB] g=62, 24446 evaluated, 4944 expanded
[t=1.7996s, 16136 KB] New best heuristic value for ff(transform=adapt_costs(one)): 46
[t=1.80183s, 16136 KB] g=66, 24482 evaluated, 4949 expanded
[t=1.80358s, 16268 KB] New best heuristic value for ff(transform=adapt_costs(one)): 45
[t=1.80412s, 16268 KB] g=68, 24513 evaluated, 4953 expanded
[t=1.80415s, 16268 KB] New best heuristic value for ff(transform=adapt_costs(one)): 44
[t=1.80567s, 16268 KB] g=70, 24534 evaluated, 4956 expanded
[t=22.0135s, 36872 KB] New best heuristic value for ff(transform=adapt_costs(one)): 43
[t=22.0173s, 36872 KB] g=232, 303038 evaluated, 74824 expanded
[t=22.0215s, 36872 KB] New best heuristic value for ff(transform=adapt_costs(one)): 42
[t=22.0253s, 36872 KB] g=234, 303148 evaluated, 74849 expanded
[t=693.456s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 40
[t=693.456s, 706196 KB] g=1356, 9411555 evaluated, 2474075 expanded
[t=693.457s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 38
[t=693.458s, 706196 KB] g=1358, 9411581 evaluated, 2474079 expanded
[t=693.46s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 37
[t=693.46s, 706196 KB] g=1360, 9411603 evaluated, 2474082 expanded
[t=693.473s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 36
[t=693.473s, 706196 KB] g=1364, 9411791 evaluated, 2474111 expanded
[t=693.486s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 35
[t=693.487s, 706196 KB] g=1370, 9411995 evaluated, 2474143 expanded
[t=693.488s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 34
[t=693.489s, 706196 KB] g=1372, 9412018 evaluated, 2474146 expanded
[t=693.498s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 33
[t=693.498s, 706196 KB] g=1378, 9412150 evaluated, 2474167 expanded
[t=693.547s, 706196 KB] New best heuristic value for ff(transform=adapt_costs(one)): 32
[t=693.548s, 706196 KB] g=1380, 9412923 evaluated, 2474302 expanded
[t=693.631s, 706332 KB] New best heuristic value for ff(transform=adapt_costs(one)): 31
[t=693.631s, 706332 KB] g=1390, 9414207 evaluated, 2474543 expanded
[t=693.669s, 706332 KB] New best heuristic value for ff(transform=adapt_costs(one)): 30
[t=693.669s, 706332 KB] g=1396, 9414770 evaluated, 2474658 expanded
[t=694.596s, 707128 KB] New best heuristic value for ff(transform=adapt_costs(one)): 29
[t=694.596s, 707128 KB] g=1402, 9428332 evaluated, 2477950 expanded
[t=694.596s, 707128 KB] New best heuristic value for ff(transform=adapt_costs(one)): 28
[t=694.597s, 707128 KB] g=1404, 9428349 evaluated, 2477953 expanded
[t=694.598s, 707128 KB] New best heuristic value for ff(transform=adapt_costs(one)): 27
[t=694.598s, 707128 KB] g=1406, 9428360 evaluated, 2477955 expanded
[t=696.586s, 708872 KB] New best heuristic value for ff(transform=adapt_costs(one)): 26
[t=696.587s, 708872 KB] g=1488, 9457714 evaluated, 2484081 expanded
[t=696.638s, 709008 KB] New best heuristic value for ff(transform=adapt_costs(one)): 25
[t=696.639s, 709008 KB] g=1498, 9458431 evaluated, 2484250 expanded
[t=705.538s, 716356 KB] New best heuristic value for ff(transform=adapt_costs(one)): 23
[t=705.539s, 716356 KB] g=1596, 9582376 evaluated, 2513607 expanded
[t=705.541s, 716356 KB] New best heuristic value for ff(transform=adapt_costs(one)): 22
[t=705.541s, 716356 KB] g=1598, 9582392 evaluated, 2513610 expanded
[t=706.956s, 717564 KB] New best heuristic value for ff(transform=adapt_costs(one)): 21
[t=706.956s, 717564 KB] g=1644, 9603416 evaluated, 2519454 expanded
[t=706.963s, 717564 KB] New best heuristic value for ff(transform=adapt_costs(one)): 20
[t=706.963s, 717564 KB] g=1648, 9603520 evaluated, 2519477 expanded
[t=706.963s, 717564 KB] New best heuristic value for ff(transform=adapt_costs(one)): 18
[t=706.964s, 717564 KB] g=1650, 9603529 evaluated, 2519479 expanded
[t=707.031s, 717696 KB] New best heuristic value for ff(transform=adapt_costs(one)): 16
[t=707.032s, 717696 KB] g=1664, 9604535 evaluated, 2519750 expanded
[t=707.032s, 717696 KB] New best heuristic value for ff(transform=adapt_costs(one)): 14
[t=707.033s, 717696 KB] g=1666, 9604544 evaluated, 2519752 expanded
[t=721.266s, 732164 KB] New best heuristic value for ff(transform=adapt_costs(one)): 13
[t=721.267s, 732164 KB] g=1842, 9846950 evaluated, 2585983 expanded
[t=721.326s, 732164 KB] New best heuristic value for ff(transform=adapt_costs(one)): 12
[t=721.327s, 732164 KB] g=1856, 9848097 evaluated, 2586229 expanded
[t=721.353s, 732164 KB] New best heuristic value for ff(transform=adapt_costs(one)): 11
[t=721.354s, 732164 KB] g=1866, 9848585 evaluated, 2586328 expanded
[t=722.972s, 733892 KB] New best heuristic value for ff(transform=adapt_costs(one)): 10
[t=722.973s, 733892 KB] g=1932, 9877915 evaluated, 2593129 expanded
[t=722.974s, 733892 KB] New best heuristic value for ff(transform=adapt_costs(one)): 9
[t=722.975s, 733892 KB] g=1936, 9877967 evaluated, 2593144 expanded
[t=722.975s, 733892 KB] New best heuristic value for ff(transform=adapt_costs(one)): 7
[t=722.975s, 733892 KB] g=1938, 9877972 evaluated, 2593146 expanded
[t=723.014s, 734028 KB] New best heuristic value for ff(transform=adapt_costs(one)): 6
[t=723.014s, 734028 KB] g=1956, 9879072 evaluated, 2593562 expanded
[t=723.014s, 734028 KB] New best heuristic value for ff(transform=adapt_costs(one)): 4
[t=723.015s, 734028 KB] g=1958, 9879087 evaluated, 2593565 expanded
[t=723.017s, 734028 KB] New best heuristic value for ff(transform=adapt_costs(one)): 2
[t=723.018s, 734028 KB] g=1966, 9879180 evaluated, 2593592 expanded
[t=723.018s, 734028 KB] New best heuristic value for ff(transform=adapt_costs(one)): 1
[t=723.018s, 734028 KB] g=1967, 9879183 evaluated, 2593593 expanded
[t=723.018s, 734028 KB] New best heuristic value for ff(transform=adapt_costs(one)): 0
[t=723.018s, 734028 KB] g=1968, 9879185 evaluated, 2593594 expanded
[t=723.018s, 734028 KB] Solution found!
[t=723.018s, 734028 KB] Actual search time: 722.996s
unstack b10 b9 (1)
putdown b10 (1)
unstack b16 b27 (1)
stack b16 b31 (1)
unstack b9 b1 (1)
stack b9 b16 (1)
unstack b1 b12 (1)
stack b1 b27 (1)
unstack b12 b32 (1)
stack b12 b1 (1)
unstack b9 b16 (1)
stack b9 b12 (1)
unstack b16 b31 (1)
stack b16 b32 (1)
unstack b9 b12 (1)
stack b9 b25 (1)
unstack b31 b33 (1)
stack b31 b12 (1)
unstack b33 b20 (1)
stack b33 b16 (1)
unstack b20 b5 (1)
stack b20 b31 (1)
unstack b5 b23 (1)
putdown b5 (1)
unstack b23 b8 (1)
putdown b23 (1)
unstack b8 b3 (1)
stack b8 b5 (1)
unstack b33 b16 (1)
stack b33 b3 (1)
unstack b20 b31 (1)
putdown b20 (1)
unstack b9 b25 (1)
stack b9 b31 (1)
unstack b16 b32 (1)
stack b16 b8 (1)
unstack b32 b26 (1)
stack b32 b16 (1)
pickup b20 (1)
stack b20 b26 (1)
unstack b32 b16 (1)
stack b32 b10 (1)
unstack b9 b31 (1)
putdown b9 (1)
unstack b16 b8 (1)
stack b16 b32 (1)
unstack b20 b26 (1)
stack b20 b25 (1)
unstack b26 b14 (1)
stack b26 b31 (1)
unstack b14 b22 (1)
stack b14 b16 (1)
unstack b22 b18 (1)
stack b22 b8 (1)
unstack b18 b2 (1)
stack b18 b22 (1)
unstack b2 b7 (1)
stack b2 b20 (1)
pickup b7 (1)
stack b7 b26 (1)
pickup b9 (1)
stack b9 b7 (1)
unstack b18 b22 (1)
stack b18 b14 (1)
unstack b33 b3 (1)
putdown b33 (1)
unstack b3 b30 (1)
stack b3 b23 (1)
pickup b33 (1)
stack b33 b3 (1)
pickup b30 (1)
stack b30 b33 (1)
unstack b2 b20 (1)
stack b2 b18 (1)
unstack b20 b25 (1)
stack b20 b30 (1)
unstack b2 b18 (1)
stack b2 b20 (1)
unstack b18 b14 (1)
stack b18 b22 (1)
unstack b14 b16 (1)
putdown b14 (1)
unstack b16 b32 (1)
stack b16 b25 (1)
unstack b32 b10 (1)
stack b32 b16 (1)
unstack b18 b22 (1)
stack b18 b10 (1)
pickup b14 (1)
stack b14 b2 (1)
unstack b32 b16 (1)
stack b32 b22 (1)
unstack b16 b25 (1)
stack b16 b32 (1)
unstack b14 b2 (1)
stack b14 b16 (1)
unstack b2 b20 (1)
stack b2 b25 (1)
unstack b20 b30 (1)
putdown b20 (1)
unstack b2 b25 (1)
stack b2 b20 (1)
unstack b30 b33 (1)
putdown b30 (1)
unstack b33 b3 (1)
stack b33 b25 (1)
unstack b3 b23 (1)
stack b3 b30 (1)
unstack b33 b25 (1)
stack b33 b3 (1)
pickup b25 (1)
stack b25 b18 (1)
unstack b2 b20 (1)
stack b2 b14 (1)
pickup b20 (1)
stack b20 b33 (1)
unstack b2 b14 (1)
stack b2 b20 (1)
unstack b25 b18 (1)
putdown b25 (1)
pickup b23 (1)
stack b23 b18 (1)
unstack b14 b16 (1)
putdown b14 (1)
unstack b16 b32 (1)
stack b16 b9 (1)
pickup b14 (1)
stack b14 b16 (1)
unstack b32 b22 (1)
stack b32 b25 (1)
unstack b23 b18 (1)
putdown b23 (1)
unstack b2 b20 (1)
stack b2 b22 (1)
unstack b20 b33 (1)
putdown b20 (1)
unstack b2 b22 (1)
stack b2 b20 (1)
unstack b32 b25 (1)
stack b32 b2 (1)
unstack b14 b16 (1)
stack b14 b25 (1)
unstack b16 b9 (1)
stack b16 b32 (1)
unstack b14 b25 (1)
stack b14 b16 (1)
pickup b23 (1)
stack b23 b18 (1)
unstack b33 b3 (1)
stack b33 b22 (1)
unstack b3 b30 (1)
stack b3 b23 (1)
pickup b30 (1)
stack b30 b14 (1)
unstack b9 b7 (1)
stack b9 b25 (1)
unstack b3 b23 (1)
stack b3 b9 (1)
unstack b30 b14 (1)
stack b30 b23 (1)
unstack b33 b22 (1)
stack b33 b14 (1)
unstack b7 b26 (1)
putdown b7 (1)
unstack b3 b9 (1)
stack b3 b26 (1)
unstack b33 b14 (1)
stack b33 b3 (1)
pickup b7 (1)
stack b7 b14 (1)
unstack b9 b25 (1)
stack b9 b7 (1)
unstack b30 b23 (1)
stack b30 b9 (1)
unstack b23 b18 (1)
putdown b23 (1)
unstack b33 b3 (1)
putdown b33 (1)
unstack b3 b26 (1)
stack b3 b30 (1)
pickup b25 (1)
stack b25 b18 (1)
unstack b3 b30 (1)
stack b3 b25 (1)
pickup b33 (1)
stack b33 b3 (1)
unstack b26 b31 (1)
stack b26 b33 (1)
unstack b30 b9 (1)
stack b30 b31 (1)
unstack b9 b7 (1)
stack b9 b30 (1)
unstack b7 b14 (1)
stack b7 b9 (1)
unstack b26 b33 (1)
stack b26 b22 (1)
unstack b7 b9 (1)
stack b7 b26 (1)
unstack b9 b30 (1)
stack b9 b7 (1)
unstack b33 b3 (1)
putdown b33 (1)
unstack b3 b25 (1)
stack b3 b9 (1)
pickup b33 (1)
stack b33 b3 (1)
unstack b25 b18 (1)
putdown b25 (1)
pickup b23 (1)
stack b23 b18 (1)
unstack b30 b31 (1)
stack b30 b23 (1)
unstack b31 b12 (1)
stack b31 b33 (1)
unstack b30 b23 (1)
putdown b30 (1)
unstack b12 b1 (1)
stack b12 b23 (1)
unstack b31 b33 (1)
stack b31 b12 (1)
unstack b1 b27 (1)
stack b1 b31 (1)
unstack b27 b6 (1)
stack b27 b1 (1)
unstack b6 b21 (1)
stack b6 b14 (1)
unstack b21 b4 (1)
putdown b21 (1)
unstack b4 b29 (1)
stack b4 b21 (1)
unstack b29 b17 (1)
stack b29 b25 (1)
unstack b17 b13 (1)
stack b17 b30 (1)
unstack b27 b1 (1)
stack b27 b4 (1)
unstack b1 b31 (1)
stack b1 b6 (1)
unstack b13 b19 (1)
stack b13 b1 (1)
unstack b19 b15 (1)
stack b19 b13 (1)
unstack b15 b11 (1)
stack b15 b27 (1)
unstack b11 b28 (1)
stack b11 b33 (1)
unstack b28 b24 (1)
stack b28 b15 (1)
pickup b24 (1)
stack b24 b11 (1)
unstack b19 b13 (1)
stack b19 b17 (1)
unstack b13 b1 (1)
stack b13 b24 (1)
unstack b19 b17 (1)
stack b19 b1 (1)
unstack b28 b15 (1)
stack b28 b13 (1)
unstack b15 b27 (1)
stack b15 b17 (1)
unstack b27 b4 (1)
stack b27 b28 (1)
unstack b15 b17 (1)
stack b15 b27 (1)
unstack b17 b30 (1)
stack b17 b4 (1)
pickup b30 (1)
stack b30 b15 (1)
unstack b17 b4 (1)
stack b17 b30 (1)
unstack b31 b12 (1)
putdown b31 (1)
unstack b12 b23 (1)
stack b12 b4 (1)
unstack b19 b1 (1)
stack b19 b23 (1)
unstack b12 b4 (1)
stack b12 b1 (1)
pickup b31 (1)
stack b31 b12 (1)
unstack b19 b23 (1)
stack b19 b31 (1)
unstack b23 b18 (1)
putdown b23 (1)
unstack b19 b31 (1)
stack b19 b23 (1)
unstack b17 b30 (1)
stack b17 b4 (1)
unstack b30 b15 (1)
stack b30 b31 (1)
unstack b17 b4 (1)
stack b17 b30 (1)
unstack b15 b27 (1)
putdown b15 (1)
unstack b17 b30 (1)
stack b17 b27 (1)
pickup b15 (1)
stack b15 b29 (1)
unstack b30 b31 (1)
stack b30 b15 (1)
unstack b17 b27 (1)
stack b17 b30 (1)
unstack b27 b28 (1)
stack b27 b18 (1)
unstack b28 b13 (1)
stack b28 b19 (1)
unstack b27 b18 (1)
stack b27 b28 (1)
unstack b17 b30 (1)
stack b17 b13 (1)
unstack b30 b15 (1)
stack b30 b18 (1)
unstack b17 b13 (1)
stack b17 b30 (1)
unstack b15 b29 (1)
stack b15 b27 (1)
unstack b17 b30 (1)
stack b17 b4 (1)
unstack b30 b18 (1)
stack b30 b15 (1)
unstack b17 b4 (1)
stack b17 b30 (1)
unstack b29 b25 (1)
stack b29 b31 (1)
pickup b25 (1)
stack b25 b18 (1)
unstack b29 b31 (1)
stack b29 b25 (1)
unstack b13 b24 (1)
stack b13 b17 (1)
unstack b24 b11 (1)
stack b24 b29 (1)
unstack b13 b17 (1)
stack b13 b24 (1)
unstack b11 b33 (1)
putdown b11 (1)
unstack b13 b24 (1)
stack b13 b33 (1)
unstack b24 b29 (1)
stack b24 b11 (1)
unstack b13 b33 (1)
stack b13 b24 (1)
unstack b33 b3 (1)
stack b33 b13 (1)
unstack b3 b9 (1)
stack b3 b17 (1)
unstack b33 b13 (1)
stack b33 b3 (1)
unstack b13 b24 (1)
putdown b13 (1)
unstack b24 b11 (1)
stack b24 b4 (1)
pickup b11 (1)
stack b11 b33 (1)
unstack b24 b4 (1)
stack b24 b11 (1)
pickup b13 (1)
stack b13 b24 (1)
unstack b9 b7 (1)
stack b9 b29 (1)
unstack b7 b26 (1)
stack b7 b13 (1)
unstack b26 b22 (1)
stack b26 b31 (1)
unstack b7 b13 (1)
stack b7 b26 (1)
unstack b9 b29 (1)
stack b9 b7 (1)
unstack b29 b25 (1)
stack b29 b13 (1)
unstack b25 b18 (1)
putdown b25 (1)
unstack b29 b13 (1)
stack b29 b25 (1)
unstack b18 b10 (1)
stack b18 b22 (1)
pickup b10 (1)
stack b10 b29 (1)
unstack b18 b22 (1)
stack b18 b10 (1)
unstack b9 b7 (1)
stack b9 b18 (1)
unstack b7 b26 (1)
putdown b7 (1)
unstack b9 b18 (1)
stack b9 b7 (1)
unstack b26 b31 (1)
stack b26 b18 (1)
unstack b31 b12 (1)
stack b31 b4 (1)
unstack b26 b18 (1)
stack b26 b31 (1)
unstack b9 b7 (1)
stack b9 b13 (1)
pickup b7 (1)
stack b7 b26 (1)
unstack b9 b13 (1)
stack b9 b7 (1)
unstack b12 b1 (1)
stack b12 b9 (1)
unstack b1 b6 (1)
putdown b1 (1)
unstack b12 b9 (1)
stack b12 b1 (1)
unstack b6 b14 (1)
stack b6 b13 (1)
unstack b12 b1 (1)
stack b12 b14 (1)
pickup b1 (1)
stack b1 b6 (1)
unstack b12 b14 (1)
stack b12 b1 (1)
unstack b9 b7 (1)
stack b9 b12 (1)
unstack b7 b26 (1)
stack b7 b18 (1)
unstack b9 b12 (1)
stack b9 b7 (1)
unstack b26 b31 (1)
stack b26 b9 (1)
unstack b31 b4 (1)
stack b31 b12 (1)
unstack b26 b9 (1)
stack b26 b31 (1)
unstack b9 b7 (1)
stack b9 b4 (1)
unstack b7 b18 (1)
stack b7 b26 (1)
unstack b9 b4 (1)
stack b9 b7 (1)
unstack b14 b16 (1)
stack b14 b18 (1)
unstack b16 b32 (1)
putdown b16 (1)
unstack b14 b18 (1)
stack b14 b16 (1)
unstack b32 b2 (1)
stack b32 b4 (1)
unstack b14 b16 (1)
stack b14 b9 (1)
pickup b16 (1)
stack b16 b32 (1)
unstack b2 b20 (1)
putdown b2 (1)
unstack b14 b9 (1)
stack b14 b16 (1)
unstack b9 b7 (1)
stack b9 b18 (1)
pickup b20 (1)
stack b20 b9 (1)
pickup b2 (1)
stack b2 b20 (1)
unstack b7 b26 (1)
stack b7 b14 (1)
unstack b26 b31 (1)
stack b26 b22 (1)
unstack b7 b14 (1)
stack b7 b26 (1)
unstack b2 b20 (1)
stack b2 b31 (1)
unstack b20 b9 (1)
putdown b20 (1)
unstack b9 b18 (1)
stack b9 b7 (1)
pickup b20 (1)
stack b20 b18 (1)
unstack b2 b31 (1)
stack b2 b20 (1)
unstack b31 b12 (1)
stack b31 b2 (1)
unstack b12 b1 (1)
putdown b12 (1)
unstack b31 b2 (1)
stack b31 b12 (1)
unstack b1 b6 (1)
stack b1 b2 (1)
unstack b6 b13 (1)
stack b6 b14 (1)
unstack b1 b2 (1)
stack b1 b6 (1)
unstack b31 b12 (1)
putdown b31 (1)
pickup b12 (1)
stack b12 b1 (1)
pickup b31 (1)
stack b31 b12 (1)
unstack b2 b20 (1)
putdown b2 (1)
unstack b20 b18 (1)
putdown b20 (1)
pickup b2 (1)
stack b2 b20 (1)
unstack b9 b7 (1)
stack b9 b18 (1)
unstack b7 b26 (1)
stack b7 b9 (1)
unstack b26 b22 (1)
stack b26 b31 (1)
unstack b7 b9 (1)
stack b7 b26 (1)
unstack b9 b18 (1)
stack b9 b7 (1)
unstack b18 b10 (1)
putdown b18 (1)
unstack b10 b29 (1)
putdown b10 (1)
pickup b18 (1)
stack b18 b10 (1)
unstack b2 b20 (1)
stack b2 b18 (1)
pickup b20 (1)
stack b20 b9 (1)
unstack b2 b18 (1)
stack b2 b20 (1)
unstack b13 b24 (1)
stack b13 b22 (1)
unstack b24 b11 (1)
stack b24 b2 (1)
unstack b11 b33 (1)
stack b11 b29 (1)
unstack b24 b2 (1)
stack b24 b11 (1)
unstack b13 b22 (1)
stack b13 b24 (1)
unstack b2 b20 (1)
stack b2 b13 (1)
unstack b20 b9 (1)
putdown b20 (1)
unstack b2 b13 (1)
stack b2 b20 (1)
unstack b33 b3 (1)
putdown b33 (1)
unstack b3 b17 (1)
stack b3 b9 (1)
unstack b17 b30 (1)
stack b17 b22 (1)
unstack b3 b9 (1)
stack b3 b17 (1)
pickup b33 (1)
stack b33 b3 (1)
unstack b2 b20 (1)
putdown b2 (1)
pickup b20 (1)
stack b20 b9 (1)
unstack b30 b15 (1)
stack b30 b20 (1)
pickup b2 (1)
stack b2 b13 (1)
unstack b15 b27 (1)
stack b15 b18 (1)
unstack b30 b20 (1)
stack b30 b15 (1)
unstack b2 b13 (1)
stack b2 b20 (1)
unstack b30 b15 (1)
stack b30 b27 (1)
unstack b15 b18 (1)
stack b15 b13 (1)
unstack b30 b27 (1)
stack b30 b15 (1)
unstack b27 b28 (1)
stack b27 b2 (1)
unstack b28 b19 (1)
stack b28 b30 (1)
unstack b27 b2 (1)
stack b27 b28 (1)
unstack b2 b20 (1)
putdown b2 (1)
unstack b20 b9 (1)
stack b20 b19 (1)
pickup b2 (1)
stack b2 b20 (1)
unstack b27 b28 (1)
stack b27 b9 (1)
unstack b28 b30 (1)
putdown b28 (1)
unstack b27 b9 (1)
stack b27 b28 (1)
unstack b30 b15 (1)
stack b30 b9 (1)
unstack b15 b13 (1)
stack b15 b27 (1)
unstack b30 b9 (1)
stack b30 b15 (1)
unstack b33 b3 (1)
stack b33 b13 (1)
unstack b3 b17 (1)
stack b3 b2 (1)
unstack b17 b22 (1)
stack b17 b30 (1)
unstack b3 b2 (1)
stack b3 b17 (1)
unstack b33 b13 (1)
stack b33 b3 (1)
unstack b13 b24 (1)
stack b13 b2 (1)
unstack b24 b11 (1)
stack b24 b18 (1)
unstack b11 b29 (1)
stack b11 b33 (1)
unstack b24 b18 (1)
stack b24 b11 (1)
unstack b13 b2 (1)
stack b13 b24 (1)
unstack b18 b10 (1)
stack b18 b13 (1)
pickup b10 (1)
stack b10 b2 (1)
unstack b18 b13 (1)
stack b18 b10 (1)
unstack b29 b25 (1)
stack b29 b13 (1)
pickup b25 (1)
stack b25 b18 (1)
unstack b29 b13 (1)
stack b29 b25 (1)
unstack b13 b24 (1)
stack b13 b22 (1)
unstack b24 b11 (1)
stack b24 b29 (1)
unstack b13 b22 (1)
stack b13 b24 (1)
unstack b11 b33 (1)
stack b11 b22 (1)
unstack b33 b3 (1)
putdown b33 (1)
unstack b11 b22 (1)
stack b11 b33 (1)
unstack b13 b24 (1)
putdown b13 (1)
unstack b24 b29 (1)
stack b24 b11 (1)
pickup b13 (1)
stack b13 b24 (1)
unstack b3 b17 (1)
stack b3 b9 (1)
unstack b17 b30 (1)
stack b17 b29 (1)
unstack b3 b9 (1)
stack b3 b17 (1)
unstack b13 b24 (1)
putdown b13 (1)
unstack b24 b11 (1)
stack b24 b22 (1)
pickup b13 (1)
stack b13 b24 (1)
unstack b11 b33 (1)
stack b11 b30 (1)
pickup b33 (1)
stack b33 b3 (1)
unstack b11 b30 (1)
stack b11 b33 (1)
unstack b13 b24 (1)
stack b13 b30 (1)
unstack b24 b22 (1)
stack b24 b11 (1)
unstack b13 b30 (1)
stack b13 b24 (1)
unstack b30 b15 (1)
stack b30 b22 (1)
unstack b15 b27 (1)
putdown b15 (1)
unstack b30 b22 (1)
stack b30 b15 (1)
unstack b27 b28 (1)
putdown b27 (1)
pickup b28 (1)
stack b28 b22 (1)
pickup b27 (1)
stack b27 b28 (1)
unstack b30 b15 (1)
stack b30 b9 (1)
pickup b15 (1)
stack b15 b27 (1)
unstack b30 b9 (1)
stack b30 b15 (1)
unstack b13 b24 (1)
stack b13 b30 (1)
unstack b24 b11 (1)
stack b24 b13 (1)
unstack b11 b33 (1)
putdown b11 (1)
unstack b24 b13 (1)
stack b24 b11 (1)
unstack b13 b30 (1)
stack b13 b24 (1)
unstack b33 b3 (1)
putdown b33 (1)
unstack b3 b17 (1)
stack b3 b33 (1)
unstack b17 b29 (1)
stack b17 b30 (1)
unstack b3 b33 (1)
stack b3 b17 (1)
pickup b33 (1)
stack b33 b3 (1)
unstack b13 b24 (1)
stack b13 b9 (1)
unstack b24 b11 (1)
stack b24 b13 (1)
pickup b11 (1)
stack b11 b33 (1)
unstack b24 b13 (1)
stack b24 b11 (1)
unstack b13 b9 (1)
stack b13 b24 (1)
[t=723.018s, 734028 KB] Plan length: 706 step(s).
[t=723.018s, 734028 KB] Plan cost: 706
[t=723.018s, 734028 KB] Timestamp: 1685498164991 millisecond(s).
[t=723.018s, 734028 KB] Expanded 2593595 state(s).
[t=723.018s, 734028 KB] Reopened 0 state(s).
[t=723.018s, 734028 KB] Evaluated 9879187 state(s).
[t=723.018s, 734028 KB] Evaluations: 9879187
[t=723.018s, 734028 KB] Generated 15483767 state(s).
[t=723.018s, 734028 KB] Dead ends: 0 state(s).
[t=723.018s, 734028 KB] Number of registered states: 9879187
[t=723.018s, 734028 KB] Int hash set load factor: 9879187/16777216 = 0.588845
[t=723.018s, 734028 KB] Int hash set resizes: 24
[t=723.018s, 734028 KB] Search time: 722.996s
[t=723.018s, 734028 KB] Total time: 723.018s
Solution found.
Peak memory: 734028 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 706 

Successful plans:
Value: 706
 sas_plan 706 

validate exit code: 0

INFO     Planner time: 723.50s
