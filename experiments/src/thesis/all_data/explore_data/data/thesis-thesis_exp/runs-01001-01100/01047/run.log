INFO     planner time limit: 900s
INFO     planner memory limit: 3584 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 899s
INFO     translator memory limit: 3584 MB
INFO     translator command line string: /usr/local/downward-projects/downward/experiments/.venv/bin/python3 /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.003s wall-clock]
Generated 90 rules.
Computing model... [0.040s CPU, 0.041s wall-clock]
3015 relevant atoms
5137 auxiliary atoms
8152 final queue length
11084 total queue pushes
Completing instantiation... [0.050s CPU, 0.046s wall-clock]
Instantiating: [0.110s CPU, 0.097s wall-clock]
Computing fact groups...
Finding invariants...
35 initial candidates
Finding invariants: [0.000s CPU, 0.004s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
257 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.000s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.003s wall-clock]
Translating task: [0.060s CPU, 0.058s wall-clock]
1500 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
34 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.024s wall-clock]
Reordering and filtering variables...
103 of 273 variables necessary.
0 of 22 mutex groups necessary.
1848 of 2182 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.007s wall-clock]
Translator variables: 103
Translator derived variables: 0
Translator facts: 260
Translator goal facts: 28
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 1848
Translator axioms: 0
Translator task size: 8140
Translator peak memory: 40300 KB
Writing output... [0.000s CPU, 0.007s wall-clock]
Done! [0.210s CPU, 0.209s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 899s
INFO     search memory limit: 3584 MB
INFO     search command line string: /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/downward --evaluator 'h=ff(transform=adapt_costs(one))' --search 'eager(alt([single(h), linear_weighted_type_based([h, g()], ignore_size=true)]), cost_type=one)' --internal-plan-file sas_plan < output.sas
[t=0.00255963s, 11200 KB] reading input...
[t=0.00652159s, 11632 KB] done reading input!
[t=0.00840479s, 12188 KB] Simplifying 2308 unary operators... done! [908 unary operators]
[t=0.0109035s, 12188 KB] time to simplify: 0.00249874s
[t=0.0109768s, 12188 KB] Initializing additive heuristic...
[t=0.0110442s, 12188 KB] Initializing FF heuristic...
[t=0.0110697s, 12188 KB] Building successor generator...done!
[t=0.0115721s, 12188 KB] peak memory difference for successor generator creation: 0 KB
[t=0.011622s, 12188 KB] time for successor generation creation: 0s
[t=0.0116469s, 12188 KB] Variables: 103
[t=0.0116806s, 12188 KB] FactPairs: 260
[t=0.0117054s, 12188 KB] Bytes per state: 16
[t=0.0117291s, 12188 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0117844s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 77
[t=0.0118426s, 12188 KB] g=0, 1 evaluated, 0 expanded
[t=0.0118668s, 12188 KB] Initial heuristic value for ff(transform=adapt_costs(one)): 77
[t=0.0118957s, 12188 KB] pruning method: none
[t=0.0119186s, 12188 KB] Start Timestep: 1685467503615 millisecond(s).
[t=0.0119613s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 75
[t=0.0121148s, 12188 KB] g=1, 7 evaluated, 1 expanded
[t=0.0121386s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 74
[t=0.0130905s, 12188 KB] g=2, 58 evaluated, 3 expanded
[t=0.0142174s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 73
[t=0.014332s, 12188 KB] g=3, 124 evaluated, 5 expanded
[t=0.0143559s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 72
[t=0.0157365s, 12188 KB] g=4, 199 evaluated, 8 expanded
[t=0.015762s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 71
[t=0.0163004s, 12188 KB] g=5, 228 evaluated, 9 expanded
[t=0.0163256s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 70
[t=0.0166408s, 12188 KB] g=6, 245 evaluated, 10 expanded
[t=0.018131s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 69
[t=0.0198301s, 12188 KB] g=8, 423 evaluated, 20 expanded
[t=0.0221067s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 68
[t=0.0246202s, 12188 KB] g=10, 693 evaluated, 36 expanded
[t=0.0260753s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 67
[t=0.028932s, 12188 KB] g=12, 940 evaluated, 50 expanded
[t=0.03005s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 66
[t=0.0322213s, 12188 KB] g=14, 1121 evaluated, 61 expanded
[t=0.0340272s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 65
[t=0.0360123s, 12188 KB] g=18, 1337 evaluated, 78 expanded
[t=0.0379968s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 64
[t=0.0389429s, 12188 KB] g=20, 1504 evaluated, 90 expanded
[t=0.0389694s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 63
[t=0.0402681s, 12188 KB] g=22, 1578 evaluated, 96 expanded
[t=0.0402937s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 62
[t=0.0416728s, 12188 KB] g=24, 1656 evaluated, 103 expanded
[t=0.041914s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 61
[t=0.043498s, 12188 KB] g=26, 1755 evaluated, 110 expanded
[t=0.0435232s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 60
[t=0.0441743s, 12188 KB] g=27, 1792 evaluated, 112 expanded
[t=0.0441992s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 59
[t=0.0447424s, 12188 KB] g=28, 1823 evaluated, 114 expanded
[t=0.0447674s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 58
[t=0.0451303s, 12188 KB] g=29, 1844 evaluated, 115 expanded
[t=0.0451551s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 57
[t=0.0454979s, 12188 KB] g=30, 1864 evaluated, 116 expanded
[t=0.0458048s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 56
[t=0.0462318s, 12188 KB] g=31, 1906 evaluated, 118 expanded
[t=0.0462573s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 55
[t=0.0469348s, 12188 KB] g=32, 1947 evaluated, 120 expanded
[t=0.0469589s, 12188 KB] New best heuristic value for ff(transform=adapt_costs(one)): 54
[t=0.0486243s, 12188 KB] g=34, 2037 evaluated, 125 expanded
[t=0.0486489s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 53
[t=0.0492696s, 12324 KB] g=35, 2072 evaluated, 127 expanded
[t=0.0497212s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 52
[t=0.0505025s, 12324 KB] g=37, 2139 evaluated, 132 expanded
[t=0.0505312s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 51
[t=0.0509806s, 12324 KB] g=38, 2163 evaluated, 134 expanded
[t=0.0510049s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 50
[t=0.052267s, 12324 KB] g=40, 2237 evaluated, 139 expanded
[t=0.052293s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 49
[t=0.0528101s, 12324 KB] g=41, 2263 evaluated, 141 expanded
[t=0.0535425s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 48
[t=0.0546774s, 12324 KB] g=43, 2369 evaluated, 149 expanded
[t=0.0547026s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 47
[t=0.0552519s, 12324 KB] g=44, 2401 evaluated, 151 expanded
[t=0.055277s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 46
[t=0.0574147s, 12324 KB] g=46, 2533 evaluated, 162 expanded
[t=0.0574599s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 45
[t=0.0576902s, 12324 KB] g=47, 2546 evaluated, 163 expanded
[t=0.0577161s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 44
[t=0.0596639s, 12324 KB] g=49, 2661 evaluated, 173 expanded
[t=0.0596889s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 43
[t=0.0604267s, 12324 KB] g=50, 2706 evaluated, 175 expanded
[t=0.0604521s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 42
[t=0.0610333s, 12324 KB] g=51, 2739 evaluated, 177 expanded
[t=0.0613749s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 41
[t=0.0617206s, 12324 KB] g=52, 2776 evaluated, 179 expanded
[t=0.061745s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 40
[t=0.0646502s, 12324 KB] g=54, 2953 evaluated, 190 expanded
[t=0.0646748s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 39
[t=0.0650848s, 12324 KB] g=55, 2978 evaluated, 191 expanded
[t=0.0732645s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 38
[t=0.0759432s, 12324 KB] g=58, 3649 evaluated, 234 expanded
[t=0.0772265s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 37
[t=0.0788795s, 12324 KB] g=60, 3813 evaluated, 244 expanded
[t=0.081202s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 36
[t=0.0823209s, 12324 KB] g=62, 4030 evaluated, 258 expanded
[t=0.0823472s, 12324 KB] New best heuristic value for ff(transform=adapt_costs(one)): 35
[t=0.082976s, 12324 KB] g=63, 4066 evaluated, 260 expanded
[t=0.0971556s, 12452 KB] New best heuristic value for ff(transform=adapt_costs(one)): 34
[t=0.0981872s, 12452 KB] g=67, 5033 evaluated, 334 expanded
[t=0.0982182s, 12452 KB] New best heuristic value for ff(transform=adapt_costs(one)): 33
[t=0.100798s, 12452 KB] g=69, 5193 evaluated, 346 expanded
[t=0.133087s, 12580 KB] New best heuristic value for ff(transform=adapt_costs(one)): 32
[t=0.133834s, 12580 KB] g=71, 7261 evaluated, 504 expanded
[t=0.133865s, 12580 KB] New best heuristic value for ff(transform=adapt_costs(one)): 31
[t=0.135356s, 12580 KB] g=73, 7356 evaluated, 509 expanded
[t=0.135382s, 12580 KB] New best heuristic value for ff(transform=adapt_costs(one)): 30
[t=0.136577s, 12580 KB] g=75, 7432 evaluated, 513 expanded
[t=0.176923s, 12704 KB] New best heuristic value for ff(transform=adapt_costs(one)): 29
[t=0.180396s, 12704 KB] g=78, 10118 evaluated, 723 expanded
[t=0.180428s, 12704 KB] New best heuristic value for ff(transform=adapt_costs(one)): 28
[t=0.180887s, 12704 KB] g=79, 10143 evaluated, 725 expanded
[t=0.204809s, 12836 KB] New best heuristic value for ff(transform=adapt_costs(one)): 27
[t=0.208909s, 12836 KB] g=83, 11910 evaluated, 854 expanded
[t=0.208942s, 12836 KB] New best heuristic value for ff(transform=adapt_costs(one)): 26
[t=0.209035s, 12836 KB] g=83, 11914 evaluated, 854 expanded
[t=0.209059s, 12836 KB] New best heuristic value for ff(transform=adapt_costs(one)): 25
[t=0.209502s, 12836 KB] g=84, 11942 evaluated, 855 expanded
[t=0.340656s, 13360 KB] New best heuristic value for ff(transform=adapt_costs(one)): 23
[t=0.341493s, 13360 KB] g=92, 20224 evaluated, 1479 expanded
[t=0.341527s, 13360 KB] New best heuristic value for ff(transform=adapt_costs(one)): 22
[t=0.341819s, 13360 KB] g=93, 20242 evaluated, 1480 expanded
[t=0.344567s, 13360 KB] New best heuristic value for ff(transform=adapt_costs(one)): 21
[t=0.346334s, 13360 KB] g=95, 20525 evaluated, 1501 expanded
[t=0.34636s, 13360 KB] New best heuristic value for ff(transform=adapt_costs(one)): 20
[t=0.346829s, 13360 KB] g=96, 20551 evaluated, 1503 expanded
[t=0.346853s, 13360 KB] New best heuristic value for ff(transform=adapt_costs(one)): 19
[t=0.347357s, 13360 KB] g=97, 20579 evaluated, 1505 expanded
[t=0.376439s, 13492 KB] New best heuristic value for ff(transform=adapt_costs(one)): 18
[t=0.378439s, 13492 KB] g=103, 22563 evaluated, 1658 expanded
[t=0.378469s, 13492 KB] New best heuristic value for ff(transform=adapt_costs(one)): 17
[t=0.378674s, 13492 KB] g=104, 22575 evaluated, 1659 expanded
[t=0.664239s, 14680 KB] New best heuristic value for ff(transform=adapt_costs(one)): 16
[t=0.667806s, 14680 KB] g=113, 40890 evaluated, 3144 expanded
[t=0.748087s, 14948 KB] New best heuristic value for ff(transform=adapt_costs(one)): 15
[t=0.749654s, 14948 KB] g=116, 46118 evaluated, 3573 expanded
[t=0.749685s, 14948 KB] New best heuristic value for ff(transform=adapt_costs(one)): 14
[t=0.750048s, 14948 KB] g=117, 46139 evaluated, 3575 expanded
[t=0.750074s, 14948 KB] New best heuristic value for ff(transform=adapt_costs(one)): 13
[t=0.750709s, 14948 KB] g=118, 46179 evaluated, 3577 expanded
[t=0.783924s, 14948 KB] New best heuristic value for ff(transform=adapt_costs(one)): 12
[t=0.786666s, 14948 KB] g=121, 48536 evaluated, 3744 expanded
[t=0.787854s, 15080 KB] New best heuristic value for ff(transform=adapt_costs(one)): 11
[t=0.789257s, 15080 KB] g=123, 48710 evaluated, 3754 expanded
[t=0.819782s, 15080 KB] New best heuristic value for ff(transform=adapt_costs(one)): 10
[t=0.823291s, 15080 KB] g=126, 50965 evaluated, 3916 expanded
[t=0.823712s, 15080 KB] New best heuristic value for ff(transform=adapt_costs(one)): 9
[t=0.823998s, 15080 KB] g=127, 51006 evaluated, 3918 expanded
[t=0.824024s, 15080 KB] New best heuristic value for ff(transform=adapt_costs(one)): 8
[t=0.824713s, 15080 KB] g=128, 51052 evaluated, 3920 expanded
[t=0.824738s, 15080 KB] New best heuristic value for ff(transform=adapt_costs(one)): 7
[t=0.82531s, 15080 KB] g=129, 51089 evaluated, 3922 expanded
[t=0.931598s, 16376 KB] New best heuristic value for ff(transform=adapt_costs(one)): 6
[t=0.931822s, 16376 KB] g=134, 57973 evaluated, 4466 expanded
[t=0.931853s, 16376 KB] New best heuristic value for ff(transform=adapt_costs(one)): 5
[t=0.932389s, 16376 KB] g=135, 58006 evaluated, 4468 expanded
[t=0.935505s, 16376 KB] New best heuristic value for ff(transform=adapt_costs(one)): 4
[t=0.937539s, 16376 KB] g=137, 58347 evaluated, 4492 expanded
[t=0.983422s, 16376 KB] New best heuristic value for ff(transform=adapt_costs(one)): 3
[t=0.98524s, 16376 KB] g=140, 61516 evaluated, 4783 expanded
[t=0.98527s, 16376 KB] New best heuristic value for ff(transform=adapt_costs(one)): 2
[t=0.985677s, 16376 KB] g=141, 61540 evaluated, 4785 expanded
[t=0.9857s, 16376 KB] New best heuristic value for ff(transform=adapt_costs(one)): 1
[t=0.986155s, 16376 KB] g=142, 61572 evaluated, 4787 expanded
[t=0.98618s, 16376 KB] New best heuristic value for ff(transform=adapt_costs(one)): 0
[t=0.98667s, 16376 KB] g=143, 61612 evaluated, 4789 expanded
[t=0.986694s, 16376 KB] Solution found!
[t=0.986794s, 16376 KB] Actual search time: 0.974832s
calibrate rover2 camera5 objective11 waypoint10 (1)
navigate rover2 waypoint10 waypoint11 (1)
navigate rover0 waypoint11 waypoint5 (1)
navigate rover1 waypoint6 waypoint1 (1)
sample_soil rover0 rover0store waypoint5 (1)
navigate rover1 waypoint1 waypoint0 (1)
calibrate rover2 camera6 objective4 waypoint11 (1)
take_image rover2 waypoint11 objective14 camera6 colour (1)
calibrate rover2 camera6 objective4 waypoint11 (1)
take_image rover2 waypoint11 objective16 camera6 colour (1)
calibrate rover2 camera6 objective4 waypoint11 (1)
take_image rover2 waypoint11 objective3 camera6 colour (1)
calibrate rover2 camera6 objective4 waypoint11 (1)
take_image rover2 waypoint11 objective5 camera6 colour (1)
navigate rover3 waypoint0 waypoint10 (1)
navigate rover3 waypoint10 waypoint12 (1)
sample_rock rover2 rover2store waypoint11 (1)
navigate rover2 waypoint11 waypoint10 (1)
navigate rover2 waypoint10 waypoint2 (1)
drop rover2 rover2store (1)
calibrate rover2 camera3 objective12 waypoint2 (1)
take_image rover2 waypoint2 objective15 camera3 high_res (1)
calibrate rover2 camera3 objective12 waypoint2 (1)
take_image rover2 waypoint2 objective3 camera3 high_res (1)
navigate rover2 waypoint2 waypoint4 (1)
communicate_image_data rover2 general objective5 colour waypoint4 waypoint3 (1)
communicate_image_data rover2 general objective3 high_res waypoint4 waypoint3 (1)
communicate_image_data rover2 general objective15 high_res waypoint4 waypoint3 (1)
communicate_image_data rover2 general objective3 colour waypoint4 waypoint3 (1)
communicate_image_data rover2 general objective16 colour waypoint4 waypoint3 (1)
communicate_image_data rover2 general objective14 colour waypoint4 waypoint3 (1)
communicate_rock_data rover2 general waypoint11 waypoint4 waypoint3 (1)
calibrate rover2 camera3 objective12 waypoint4 (1)
take_image rover2 waypoint4 objective14 camera3 high_res (1)
communicate_image_data rover2 general objective14 high_res waypoint4 waypoint3 (1)
calibrate rover2 camera3 objective12 waypoint4 (1)
take_image rover2 waypoint4 objective18 camera3 high_res (1)
communicate_image_data rover2 general objective18 high_res waypoint4 waypoint3 (1)
calibrate rover2 camera3 objective12 waypoint4 (1)
take_image rover2 waypoint4 objective6 camera3 high_res (1)
communicate_image_data rover2 general objective6 high_res waypoint4 waypoint3 (1)
calibrate rover2 camera6 objective4 waypoint4 (1)
take_image rover2 waypoint4 objective18 camera6 colour (1)
communicate_image_data rover2 general objective18 colour waypoint4 waypoint3 (1)
sample_rock rover2 rover2store waypoint4 (1)
drop rover2 rover2store (1)
communicate_rock_data rover2 general waypoint4 waypoint4 waypoint3 (1)
navigate rover1 waypoint0 waypoint1 (1)
calibrate rover1 camera0 objective5 waypoint1 (1)
navigate rover0 waypoint5 waypoint11 (1)
navigate rover0 waypoint11 waypoint4 (1)
communicate_soil_data rover0 general waypoint5 waypoint4 waypoint3 (1)
take_image rover1 waypoint1 objective11 camera0 colour (1)
calibrate rover1 camera0 objective5 waypoint1 (1)
communicate_image_data rover1 general objective11 colour waypoint1 waypoint3 (1)
navigate rover0 waypoint4 waypoint11 (1)
navigate rover1 waypoint1 waypoint6 (1)
take_image rover1 waypoint6 objective13 camera0 high_res (1)
calibrate rover1 camera1 objective13 waypoint6 (1)
take_image rover1 waypoint6 objective10 camera1 colour (1)
navigate rover1 waypoint6 waypoint1 (1)
communicate_image_data rover1 general objective13 high_res waypoint1 waypoint3 (1)
communicate_image_data rover1 general objective10 colour waypoint1 waypoint3 (1)
calibrate rover2 camera3 objective12 waypoint4 (1)
navigate rover1 waypoint1 waypoint6 (1)
sample_rock rover1 rover1store waypoint6 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint6 waypoint1 (1)
communicate_rock_data rover1 general waypoint6 waypoint1 waypoint3 (1)
navigate rover2 waypoint4 waypoint2 (1)
navigate rover2 waypoint2 waypoint10 (1)
navigate rover3 waypoint12 waypoint10 (1)
navigate rover2 waypoint10 waypoint7 (1)
sample_rock rover2 rover2store waypoint7 (1)
communicate_rock_data rover2 general waypoint7 waypoint7 waypoint3 (1)
drop rover2 rover2store (1)
navigate rover2 waypoint7 waypoint10 (1)
navigate rover2 waypoint10 waypoint5 (1)
sample_rock rover2 rover2store waypoint5 (1)
navigate rover3 waypoint10 waypoint0 (1)
navigate rover3 waypoint0 waypoint5 (1)
navigate rover2 waypoint5 waypoint10 (1)
navigate rover2 waypoint10 waypoint7 (1)
communicate_rock_data rover2 general waypoint5 waypoint7 waypoint3 (1)
navigate rover3 waypoint5 waypoint0 (1)
take_image rover2 waypoint7 objective11 camera5 colour (1)
navigate rover0 waypoint11 waypoint4 (1)
navigate rover0 waypoint4 waypoint3 (1)
navigate rover1 waypoint1 waypoint9 (1)
sample_soil rover1 rover1store waypoint9 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint9 waypoint1 (1)
communicate_soil_data rover1 general waypoint9 waypoint1 waypoint3 (1)
drop rover0 rover0store (1)
sample_soil rover0 rover0store waypoint3 (1)
navigate rover0 waypoint3 waypoint4 (1)
communicate_soil_data rover0 general waypoint3 waypoint4 waypoint3 (1)
navigate rover3 waypoint0 waypoint5 (1)
navigate rover0 waypoint4 waypoint11 (1)
navigate rover1 waypoint1 waypoint0 (1)
sample_soil rover1 rover1store waypoint0 (1)
navigate rover1 waypoint0 waypoint1 (1)
drop rover1 rover1store (1)
communicate_soil_data rover1 general waypoint0 waypoint1 waypoint3 (1)
navigate rover3 waypoint5 waypoint0 (1)
navigate rover3 waypoint0 waypoint7 (1)
calibrate rover1 camera0 objective5 waypoint1 (1)
calibrate rover0 camera4 objective3 waypoint11 (1)
navigate rover0 waypoint11 waypoint2 (1)
sample_rock rover1 rover1store waypoint1 (1)
drop rover2 rover2store (1)
drop rover0 rover0store (1)
communicate_rock_data rover1 general waypoint1 waypoint1 waypoint3 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint1 waypoint0 (1)
sample_rock rover1 rover1store waypoint0 (1)
navigate rover1 waypoint0 waypoint1 (1)
communicate_rock_data rover1 general waypoint0 waypoint1 waypoint3 (1)
navigate rover2 waypoint7 waypoint10 (1)
sample_rock rover2 rover2store waypoint10 (1)
drop rover2 rover2store (1)
navigate rover2 waypoint10 waypoint7 (1)
communicate_rock_data rover2 general waypoint10 waypoint7 waypoint3 (1)
navigate rover2 waypoint7 waypoint10 (1)
navigate rover2 waypoint10 waypoint8 (1)
sample_rock rover2 rover2store waypoint8 (1)
navigate rover2 waypoint8 waypoint10 (1)
navigate rover2 waypoint10 waypoint7 (1)
communicate_rock_data rover2 general waypoint8 waypoint7 waypoint3 (1)
navigate rover3 waypoint7 waypoint8 (1)
navigate rover0 waypoint2 waypoint8 (1)
navigate rover1 waypoint1 waypoint9 (1)
sample_soil rover0 rover0store waypoint8 (1)
navigate rover0 waypoint8 waypoint2 (1)
drop rover0 rover0store (1)
navigate rover0 waypoint2 waypoint1 (1)
communicate_soil_data rover0 general waypoint8 waypoint1 waypoint3 (1)
navigate rover0 waypoint1 waypoint2 (1)
navigate rover0 waypoint2 waypoint12 (1)
sample_soil rover0 rover0store waypoint12 (1)
navigate rover0 waypoint12 waypoint2 (1)
navigate rover0 waypoint2 waypoint1 (1)
communicate_soil_data rover0 general waypoint12 waypoint1 waypoint3 (1)
[t=0.986836s, 16376 KB] Plan length: 143 step(s).
[t=0.986836s, 16376 KB] Plan cost: 143
[t=0.986836s, 16376 KB] Timestamp: 1685467504596 millisecond(s).
[t=0.986836s, 16376 KB] Expanded 4791 state(s).
[t=0.986836s, 16376 KB] Reopened 0 state(s).
[t=0.986836s, 16376 KB] Evaluated 61617 state(s).
[t=0.986836s, 16376 KB] Evaluations: 61617
[t=0.986836s, 16376 KB] Generated 248309 state(s).
[t=0.986836s, 16376 KB] Dead ends: 0 state(s).
[t=0.986836s, 16376 KB] Number of registered states: 61617
[t=0.986836s, 16376 KB] Int hash set load factor: 61617/131072 = 0.4701
[t=0.986836s, 16376 KB] Int hash set resizes: 17
[t=0.986836s, 16376 KB] Search time: 0.975107s
[t=0.986836s, 16376 KB] Total time: 0.986836s
Solution found.
Peak memory: 16376 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 143 

Successful plans:
Value: 143
 sas_plan 143 

validate exit code: 0

INFO     Planner time: 1.29s
