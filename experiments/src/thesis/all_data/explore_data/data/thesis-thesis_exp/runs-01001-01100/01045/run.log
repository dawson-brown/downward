INFO     planner time limit: 900s
INFO     planner memory limit: 3584 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 899s
INFO     translator memory limit: 3584 MB
INFO     translator command line string: /usr/local/downward-projects/downward/experiments/.venv/bin/python3 /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.010s CPU, 0.002s wall-clock]
Generated 90 rules.
Computing model... [0.020s CPU, 0.028s wall-clock]
1774 relevant atoms
3720 auxiliary atoms
5494 final queue length
6977 total queue pushes
Completing instantiation... [0.030s CPU, 0.024s wall-clock]
Instantiating: [0.060s CPU, 0.060s wall-clock]
Computing fact groups...
Finding invariants...
35 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
206 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.010s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.025s wall-clock]
682 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
32 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.013s wall-clock]
Reordering and filtering variables...
85 of 220 variables necessary.
0 of 20 mutex groups necessary.
910 of 1112 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.004s wall-clock]
Translator variables: 85
Translator derived variables: 0
Translator facts: 209
Translator goal facts: 22
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 910
Translator axioms: 0
Translator task size: 4122
Translator peak memory: 36712 KB
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.110s CPU, 0.119s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 899s
INFO     search memory limit: 3584 MB
INFO     search command line string: /usr/local/downward-projects/downward/experiments/src/thesis/data/thesis-thesis_exp/code-492c46a6b9a8d722366a407090da84235e2f79dc_e5e41175/builds/release/bin/downward --evaluator 'h=ff(transform=adapt_costs(one))' --search 'eager(alt([single(h), linear_weighted_type_based([h, g()], ignore_size=true)]), cost_type=one)' --internal-plan-file sas_plan < output.sas
[t=0s, 11200 KB] reading input...
[t=0.00396283s, 11456 KB] done reading input!
[t=0.00478086s, 11852 KB] Simplifying 1164 unary operators... done! [557 unary operators]
[t=0.00687279s, 11852 KB] time to simplify: 0.00209193s
[t=0.00693048s, 11852 KB] Initializing additive heuristic...
[t=0.00698623s, 11852 KB] Initializing FF heuristic...
[t=0.00701114s, 11852 KB] Building successor generator...done!
[t=0.00733871s, 11852 KB] peak memory difference for successor generator creation: 0 KB
[t=0.00738437s, 11852 KB] time for successor generation creation: 0s
[t=0.00740908s, 11852 KB] Variables: 85
[t=0.00743817s, 11852 KB] FactPairs: 209
[t=0.0074609s, 11852 KB] Bytes per state: 16
[t=0.00748296s, 11852 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.00753762s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 63
[t=0.00759042s, 11852 KB] g=0, 1 evaluated, 0 expanded
[t=0.00761442s, 11852 KB] Initial heuristic value for ff(transform=adapt_costs(one)): 63
[t=0.0076438s, 11852 KB] pruning method: none
[t=0.00766807s, 11852 KB] Start Timestep: 1685463711526 millisecond(s).
[t=0.00772868s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 62
[t=0.00780822s, 11852 KB] g=1, 3 evaluated, 1 expanded
[t=0.00783169s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 61
[t=0.00792483s, 11852 KB] g=1, 8 evaluated, 1 expanded
[t=0.00794816s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 58
[t=0.00802876s, 11852 KB] g=1, 12 evaluated, 1 expanded
[t=0.00805157s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 57
[t=0.00836679s, 11852 KB] g=2, 34 evaluated, 2 expanded
[t=0.00839031s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 56
[t=0.00872795s, 11852 KB] g=3, 60 evaluated, 3 expanded
[t=0.008752s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 55
[t=0.0093923s, 11852 KB] g=4, 111 evaluated, 5 expanded
[t=0.00941732s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 54
[t=0.010076s, 11852 KB] g=5, 163 evaluated, 7 expanded
[t=0.0115828s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 53
[t=0.0122711s, 11852 KB] g=7, 343 evaluated, 13 expanded
[t=0.012297s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 52
[t=0.0147418s, 11852 KB] g=10, 544 evaluated, 23 expanded
[t=0.015534s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 51
[t=0.0158835s, 11852 KB] g=12, 636 evaluated, 28 expanded
[t=0.0159088s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 50
[t=0.0181209s, 11852 KB] g=14, 828 evaluated, 37 expanded
[t=0.0194857s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 49
[t=0.0201128s, 11852 KB] g=16, 997 evaluated, 45 expanded
[t=0.0201382s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 48
[t=0.0207521s, 11852 KB] g=17, 1040 evaluated, 47 expanded
[t=0.020777s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 47
[t=0.0212564s, 11852 KB] g=19, 1080 evaluated, 49 expanded
[t=0.0212821s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 46
[t=0.0223592s, 11852 KB] g=21, 1168 evaluated, 54 expanded
[t=0.0233867s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 45
[t=0.0238252s, 11852 KB] g=23, 1286 evaluated, 62 expanded
[t=0.0238503s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 44
[t=0.0258226s, 11852 KB] g=26, 1453 evaluated, 75 expanded
[t=0.0258474s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 43
[t=0.0261646s, 11852 KB] g=27, 1479 evaluated, 77 expanded
[t=0.0273134s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 42
[t=0.028464s, 11852 KB] g=30, 1678 evaluated, 93 expanded
[t=0.0284897s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 41
[t=0.0287972s, 11852 KB] g=31, 1704 evaluated, 94 expanded
[t=0.0288213s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 40
[t=0.0292853s, 11852 KB] g=32, 1743 evaluated, 96 expanded
[t=0.0293099s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 39
[t=0.0298122s, 11852 KB] g=33, 1786 evaluated, 98 expanded
[t=0.0298364s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 38
[t=0.0301165s, 11852 KB] g=34, 1810 evaluated, 99 expanded
[t=0.0301409s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 37
[t=0.0311695s, 11852 KB] g=36, 1903 evaluated, 104 expanded
[t=0.0311996s, 11852 KB] New best heuristic value for ff(transform=adapt_costs(one)): 36
[t=0.0323886s, 11852 KB] g=38, 2006 evaluated, 111 expanded
[t=0.0324131s, 11988 KB] New best heuristic value for ff(transform=adapt_costs(one)): 35
[t=0.0346868s, 11988 KB] g=41, 2187 evaluated, 126 expanded
[t=0.0430717s, 11988 KB] New best heuristic value for ff(transform=adapt_costs(one)): 34
[t=0.0467891s, 11988 KB] g=50, 3241 evaluated, 222 expanded
[t=0.0468176s, 11988 KB] New best heuristic value for ff(transform=adapt_costs(one)): 33
[t=0.0469822s, 11988 KB] g=51, 3253 evaluated, 223 expanded
[t=0.0470205s, 11988 KB] New best heuristic value for ff(transform=adapt_costs(one)): 32
[t=0.0473137s, 11988 KB] g=52, 3275 evaluated, 225 expanded
[t=0.0473384s, 11988 KB] New best heuristic value for ff(transform=adapt_costs(one)): 31
[t=0.0477908s, 11988 KB] g=53, 3309 evaluated, 227 expanded
[t=0.0478157s, 11988 KB] New best heuristic value for ff(transform=adapt_costs(one)): 30
[t=0.048104s, 11988 KB] g=54, 3333 evaluated, 229 expanded
[t=0.0829497s, 12124 KB] New best heuristic value for ff(transform=adapt_costs(one)): 29
[t=0.0846648s, 12124 KB] g=61, 6562 evaluated, 576 expanded
[t=0.0846968s, 12124 KB] New best heuristic value for ff(transform=adapt_costs(one)): 28
[t=0.0860683s, 12124 KB] g=63, 6680 evaluated, 589 expanded
[t=0.0868622s, 12124 KB] New best heuristic value for ff(transform=adapt_costs(one)): 27
[t=0.0883856s, 12124 KB] g=65, 6881 evaluated, 609 expanded
[t=0.0884114s, 12124 KB] New best heuristic value for ff(transform=adapt_costs(one)): 26
[t=0.0887737s, 12124 KB] g=66, 6912 evaluated, 611 expanded
[t=0.0988141s, 12260 KB] New best heuristic value for ff(transform=adapt_costs(one)): 25
[t=0.0997958s, 12260 KB] g=69, 7864 evaluated, 717 expanded
[t=0.106767s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 24
[t=0.110062s, 12392 KB] g=72, 8801 evaluated, 816 expanded
[t=0.110092s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 23
[t=0.110325s, 12392 KB] g=73, 8821 evaluated, 818 expanded
[t=0.110711s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 22
[t=0.112312s, 12392 KB] g=75, 8991 evaluated, 838 expanded
[t=0.112338s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 21
[t=0.112518s, 12392 KB] g=76, 9006 evaluated, 839 expanded
[t=0.112542s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 20
[t=0.114428s, 12392 KB] g=78, 9188 evaluated, 860 expanded
[t=0.114643s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 19
[t=0.114946s, 12392 KB] g=79, 9228 evaluated, 862 expanded
[t=0.114971s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 18
[t=0.115314s, 12392 KB] g=80, 9259 evaluated, 864 expanded
[t=0.115339s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 17
[t=0.115643s, 12392 KB] g=81, 9289 evaluated, 866 expanded
[t=0.115666s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 16
[t=0.115915s, 12392 KB] g=82, 9311 evaluated, 868 expanded
[t=0.115938s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 15
[t=0.116224s, 12392 KB] g=83, 9336 evaluated, 870 expanded
[t=0.116248s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 14
[t=0.116508s, 12392 KB] g=84, 9362 evaluated, 872 expanded
[t=0.116532s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 13
[t=0.116793s, 12392 KB] g=85, 9386 evaluated, 874 expanded
[t=0.116817s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 12
[t=0.117141s, 12392 KB] g=86, 9417 evaluated, 876 expanded
[t=0.117165s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 11
[t=0.117403s, 12392 KB] g=87, 9438 evaluated, 878 expanded
[t=0.117426s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 10
[t=0.117715s, 12392 KB] g=88, 9465 evaluated, 880 expanded
[t=0.11844s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 9
[t=0.119559s, 12392 KB] g=90, 9649 evaluated, 898 expanded
[t=0.119589s, 12392 KB] New best heuristic value for ff(transform=adapt_costs(one)): 8
[t=0.119789s, 12392 KB] g=91, 9668 evaluated, 900 expanded
[t=0.142394s, 12524 KB] New best heuristic value for ff(transform=adapt_costs(one)): 7
[t=0.143883s, 12524 KB] g=95, 12030 evaluated, 1206 expanded
[t=0.143913s, 12524 KB] New best heuristic value for ff(transform=adapt_costs(one)): 6
[t=0.144051s, 12524 KB] g=96, 12042 evaluated, 1207 expanded
[t=0.144075s, 12524 KB] New best heuristic value for ff(transform=adapt_costs(one)): 5
[t=0.14574s, 12524 KB] g=98, 12219 evaluated, 1226 expanded
[t=0.166263s, 12660 KB] New best heuristic value for ff(transform=adapt_costs(one)): 4
[t=0.168145s, 12660 KB] g=102, 14448 evaluated, 1509 expanded
[t=0.168178s, 12660 KB] New best heuristic value for ff(transform=adapt_costs(one)): 3
[t=0.168418s, 12660 KB] g=103, 14471 evaluated, 1511 expanded
[t=0.168443s, 12660 KB] New best heuristic value for ff(transform=adapt_costs(one)): 2
[t=0.168657s, 12660 KB] g=104, 14492 evaluated, 1513 expanded
[t=0.16868s, 12660 KB] New best heuristic value for ff(transform=adapt_costs(one)): 1
[t=0.169007s, 12660 KB] g=105, 14524 evaluated, 1515 expanded
[t=0.169031s, 12660 KB] New best heuristic value for ff(transform=adapt_costs(one)): 0
[t=0.169215s, 12660 KB] g=106, 14545 evaluated, 1517 expanded
[t=0.169241s, 12660 KB] Solution found!
[t=0.169506s, 12660 KB] Actual search time: 0.161796s
calibrate rover1 camera0 objective13 waypoint5 (1)
navigate rover2 waypoint6 waypoint1 (1)
sample_rock rover3 rover3store waypoint9 (1)
navigate rover3 waypoint9 waypoint1 (1)
communicate_rock_data rover3 general waypoint9 waypoint1 waypoint6 (1)
navigate rover2 waypoint1 waypoint2 (1)
navigate rover0 waypoint1 waypoint0 (1)
navigate rover3 waypoint1 waypoint3 (1)
take_image rover1 waypoint5 objective13 camera0 high_res (1)
calibrate rover1 camera0 objective13 waypoint5 (1)
calibrate rover2 camera3 objective13 waypoint2 (1)
take_image rover2 waypoint2 objective8 camera3 high_res (1)
calibrate rover2 camera3 objective13 waypoint2 (1)
take_image rover2 waypoint2 objective12 camera3 high_res (1)
calibrate rover2 camera3 objective13 waypoint2 (1)
take_image rover2 waypoint2 objective6 camera3 high_res (1)
navigate rover1 waypoint5 waypoint0 (1)
take_image rover1 waypoint0 objective0 camera0 colour (1)
calibrate rover1 camera5 objective9 waypoint0 (1)
sample_rock rover2 rover2store waypoint2 (1)
drop rover2 rover2store (1)
sample_soil rover1 rover1store waypoint0 (1)
drop rover1 rover1store (1)
navigate rover2 waypoint2 waypoint5 (1)
sample_rock rover2 rover2store waypoint5 (1)
navigate rover2 waypoint5 waypoint2 (1)
drop rover2 rover2store (1)
navigate rover1 waypoint0 waypoint5 (1)
navigate rover2 waypoint2 waypoint1 (1)
communicate_image_data rover2 general objective8 high_res waypoint1 waypoint6 (1)
communicate_image_data rover2 general objective6 high_res waypoint1 waypoint6 (1)
communicate_image_data rover2 general objective12 high_res waypoint1 waypoint6 (1)
communicate_rock_data rover2 general waypoint2 waypoint1 waypoint6 (1)
communicate_rock_data rover2 general waypoint5 waypoint1 waypoint6 (1)
navigate rover2 waypoint1 waypoint7 (1)
navigate rover1 waypoint5 waypoint0 (1)
sample_rock rover2 rover2store waypoint7 (1)
drop rover2 rover2store (1)
navigate rover0 waypoint0 waypoint8 (1)
take_image rover1 waypoint0 objective9 camera5 colour (1)
calibrate rover1 camera5 objective9 waypoint0 (1)
drop rover3 rover3store (1)
navigate rover0 waypoint8 waypoint0 (1)
navigate rover0 waypoint0 waypoint4 (1)
navigate rover3 waypoint3 waypoint1 (1)
navigate rover3 waypoint1 waypoint9 (1)
navigate rover3 waypoint9 waypoint2 (1)
navigate rover0 waypoint4 waypoint0 (1)
navigate rover2 waypoint7 waypoint1 (1)
navigate rover2 waypoint1 waypoint6 (1)
sample_rock rover2 rover2store waypoint6 (1)
navigate rover2 waypoint6 waypoint4 (1)
communicate_rock_data rover2 general waypoint6 waypoint4 waypoint6 (1)
communicate_rock_data rover2 general waypoint7 waypoint4 waypoint6 (1)
navigate rover3 waypoint2 waypoint9 (1)
navigate rover3 waypoint9 waypoint0 (1)
navigate rover2 waypoint4 waypoint0 (1)
navigate rover0 waypoint0 waypoint8 (1)
navigate rover1 waypoint0 waypoint7 (1)
take_image rover1 waypoint7 objective7 camera5 colour (1)
calibrate rover1 camera0 objective13 waypoint7 (1)
calibrate rover1 camera5 objective9 waypoint7 (1)
take_image rover1 waypoint7 objective4 camera5 colour (1)
sample_soil rover1 rover1store waypoint7 (1)
navigate rover1 waypoint7 waypoint0 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint0 waypoint5 (1)
sample_soil rover1 rover1store waypoint5 (1)
drop rover1 rover1store (1)
calibrate rover1 camera5 objective9 waypoint5 (1)
navigate rover1 waypoint5 waypoint10 (1)
take_image rover1 waypoint10 objective10 camera5 colour (1)
take_image rover1 waypoint10 objective12 camera0 colour (1)
sample_soil rover1 rover1store waypoint10 (1)
navigate rover1 waypoint10 waypoint5 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint5 waypoint4 (1)
communicate_image_data rover1 general objective9 colour waypoint4 waypoint6 (1)
communicate_image_data rover1 general objective7 colour waypoint4 waypoint6 (1)
communicate_image_data rover1 general objective4 colour waypoint4 waypoint6 (1)
communicate_image_data rover1 general objective13 high_res waypoint4 waypoint6 (1)
communicate_image_data rover1 general objective12 colour waypoint4 waypoint6 (1)
communicate_image_data rover1 general objective10 colour waypoint4 waypoint6 (1)
communicate_image_data rover1 general objective0 colour waypoint4 waypoint6 (1)
communicate_soil_data rover1 general waypoint0 waypoint4 waypoint6 (1)
communicate_soil_data rover1 general waypoint10 waypoint4 waypoint6 (1)
communicate_soil_data rover1 general waypoint5 waypoint4 waypoint6 (1)
communicate_soil_data rover1 general waypoint7 waypoint4 waypoint6 (1)
sample_soil rover1 rover1store waypoint4 (1)
communicate_soil_data rover1 general waypoint4 waypoint4 waypoint6 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint4 waypoint5 (1)
navigate rover1 waypoint5 waypoint2 (1)
sample_soil rover1 rover1store waypoint2 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint2 waypoint5 (1)
navigate rover1 waypoint5 waypoint4 (1)
communicate_soil_data rover1 general waypoint2 waypoint4 waypoint6 (1)
navigate rover1 waypoint4 waypoint5 (1)
navigate rover1 waypoint5 waypoint0 (1)
navigate rover1 waypoint0 waypoint9 (1)
sample_soil rover1 rover1store waypoint9 (1)
navigate rover1 waypoint9 waypoint0 (1)
navigate rover1 waypoint0 waypoint5 (1)
navigate rover1 waypoint5 waypoint4 (1)
communicate_soil_data rover1 general waypoint9 waypoint4 waypoint6 (1)
[t=0.169545s, 12660 KB] Plan length: 106 step(s).
[t=0.169545s, 12660 KB] Plan cost: 106
[t=0.169545s, 12660 KB] Timestamp: 1685463711691 millisecond(s).
[t=0.169545s, 12660 KB] Expanded 1519 state(s).
[t=0.169545s, 12660 KB] Reopened 0 state(s).
[t=0.169545s, 12660 KB] Evaluated 14570 state(s).
[t=0.169545s, 12660 KB] Evaluations: 14570
[t=0.169545s, 12660 KB] Generated 31543 state(s).
[t=0.169545s, 12660 KB] Dead ends: 0 state(s).
[t=0.169545s, 12660 KB] Number of registered states: 14570
[t=0.169545s, 12660 KB] Int hash set load factor: 14570/16384 = 0.889282
[t=0.169545s, 12660 KB] Int hash set resizes: 14
[t=0.169545s, 12660 KB] Search time: 0.162062s
[t=0.169545s, 12660 KB] Total time: 0.169545s
Solution found.
Peak memory: 12660 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 106 

Successful plans:
Value: 106
 sas_plan 106 

validate exit code: 0

INFO     Planner time: 0.38s
